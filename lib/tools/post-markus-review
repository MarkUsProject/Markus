#!/bin/bash
#
# A lightweight wrapper script for post-review
#
#set -xv # debugging

FEATURE_BRANCH=`cut -d/ -f3 .git/HEAD`
POST_REvIEW_SCRIPT="post-review"
MARKUS_CREDS="`pwd`/.markusdev-creds"
MARKUS_UPSTREAM="git://github.com/MarkUsProject/Markus.git"

function bail {
	ERROR=$1
	echo >&2 "Posting review failed. ${ERROR}"
	exit 1
}

function find_post_review {
	PR=`which ${POST_REvIEW_SCRIPT}` || \
		bail "Unable to find '${POST_REvIEW_SCRIPT}' in your PATH."
}

function prepopulate_markus_credentials {
	if [ -e ${MARKUS_CREDS} ]; then
		GITHUB_USER=`grep GITHUB_USER "$MARKUS_CREDS" | cut -d\= -f2`
	else
		while [ "${GITHUB_USER}_" = "_" ]; do
			read -p "What is your username on Github? " GITHUB_USER
		done
	fi
}

function determine_editor {
	EDIT=`printenv EDITOR`
	if [ "${EDITOR}_" = "_" ]; then
		# default to vi
		ED=vi
	else
		ED="$EDITOR"
	fi
}

function exec_safe {
	CMD="$1"
	$CMD
	if [ $? -ne 0 ]; then
		bail "$CMD failed."
	fi
}

# make sure to update the master branch, from upstream
# and create the diff between master and the feature
# branch
function create_diff {
	which git > /dev/null 2>&1 || bail "git command not found."
	read -p "Do you want to update the master branch from upstream (y/n)? " UPDATE_MASTER
	if [ "${UPDATE_MASTER}_" = "y_" ]; then
		echo "Updating master branch... "
		STASH_STACK_BEFORE=`git stash list | wc -l`
		exec_safe "git stash"
		exec_safe "git checkout master"
		exec_safe "git pull $MARKUS_UPSTREAM master"
		exec_safe "git checkout $FEATURE_BRANCH"
		STASH_STACK_AFTER=`git stash list | wc -l`
		if [ $STASH_STACK_BEFORE -lt $STASH_STACK_AFTER ]; then
			exec_safe "git stash pop"
		fi
		echo "done."
	fi
	DIFF_FILE_TEMP=".current_feature.$$.diff"
	exec_safe "git diff --full-index master $FEATURE_BRANCH" > $DIFF_FILE_TEMP
}


# Make sure we have post-review
find_post_review

# Get Markus Github username
prepopulate_markus_credentials

# figure out the editor preference
determine_editor

# Publishing?
read -p "Do you want to publish the new review request or the update immediately (y/n)? " PUBLISH
if [ "${PUBLISH}_" = "y_" ]; then
	PUBLISH="--publish"
fi

read -p "Is this an update for an existing review (Enter ID if any; otherwise leave blank)? " R_UPDATE
if [ "${R_UPDATE}_" != "_" ]; then
	####################################
	# Review request update
	####################################
	if [ "${FEATURE_BRANCH}_" = "master_" ]; then
		read -p "You are on the master branch :( Ok, so tell me the diff file name for the review (should be in CWD): " DIFF_FILE
		if [ "${DIFF_FILE}_" = "_" ] || [ ! -e $DIFF_FILE ]; then
			bail "Diff file '$DIFF_FILE' not found."
		fi
	else
		create_diff
		DIFF_FILE=$DIFF_FILE_TEMP
	fi
	# TODO:
	# How would we set the change description using post-review? Re-instate when
	# known.
	#read -p "Description of your changes (optional; return for none): " UPDATE_MSG
	#if [ "${UPDATE_MSG}_" != "_" ]; then
	#	UPDATE_MSG="--description=$UPDATE_MSG"
	#fi
	$PR "--debug" "--review-request-id=$R_UPDATE" "--diff-only" \
		"--diff-filename=$DIFF_FILE" "$PUBLISH" "$UPDATE_MSG"
	# remove temp diff file
	if [ -e $DIFF_FILE_TEMP ]; then
		rm -rf $DIFF_FILE_TEMP
	fi
	if [ $? -eq 0 ]; then
		echo -e "\nSUCCESS.\n"
		echo -e "Don't forget to update your feature branch on your fork.\n$ git push --force origin HEAD"
		exit 0
	else
		echo >&2 "Ooops. Something went wrong."
		exit 1
	fi
else
	####################################
	# New review request
	####################################
	# Bugs?
	read -p "Does this review address a bug (comma separated list; return for none)? " BUGS
	if [ "${BUGS}_" != "_" ]; then
		BUGS="--bugs=${BUGS}"
	fi
	# Summary
	while [ "${SUMMARY}_" = "_" ]; do
		read -p "Review summary (please something meaningful): " SUMMARY
	done
	DESC_FILE=".markus-review-description.$$"
	echo -e "\n<replace with description, keep the rest.>\n\n@branch $FEATURE_BRANCH" > $DESC_FILE
	GITHUB_USER="`echo $GITHUB_USER`"
	echo "@github-remote-url git://github.com/$GITHUB_USER/Markus.git" >> $DESC_FILE
	$ED $DESC_FILE && DESC=`cat $DESC_FILE`
	if [ $? -ne 0 ]; then
		rm -rf $DESC_FILE
		bail "Failed to gather description"
	fi
	rm -rf $DESC_FILE
	TEST_FILE=".markus-review-testing.$$"
	echo -e "\n<What kind of testing have you done? You may leave this empty.>\n" > $TEST_FILE
	$ED $TEST_FILE && TEST_DESC=`cat $TEST_FILE`
	if [ $? -ne 0 ]; then
		rm -rf $TEST_FILE
		bail "Failed to gather testing info."
	fi
	rm -rf $TEST_FILE
	if [ "${FEATURE_BRANCH}_" = "master_" ]; then
		read -p "You are on the master branch :( Ok, so tell me the diff file name for the review (should be in CWD): " DIFF_FILE
		if [ "${DIFF_FILE}_" = "_" ] || [ ! -e $DIFF_FILE ]; then
			bail "Diff file '$DIFF_FILE' not found."
		fi
	else
		create_diff
		DIFF_FILE=$DIFF_FILE_TEMP
	fi
	# Create the review
	$PR "--debug" "--branch=master" "--target-groups=markus_developers" "$BUGS" "$PUBLISH" \
		"--summary=$SUMMARY" "--description=$DESC" "--testing-done=$TEST_DESC" \
		"--diff-filename=$DIFF_FILE"
	# remove temp diff file
	if [ -e $DIFF_FILE_TEMP ]; then
		rm -rf $DIFF_FILE_TEMP
	fi
	if [ $? -eq 0 ]; then
		echo -e "\nSUCCESS.\n"
		echo -e "Don't forget to push your feature branch to your fork.\n$ git push origin HEAD"
	else
		echo >&2 "Ooops. Something went wrong."
		exit 1
	fi
fi
