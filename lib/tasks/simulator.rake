  # A new rake to generate assignments, random students, submissions and TA data
class Time
  # Return a random Time
  # From http://jroller.com/obie/entry/random_times_for_rails
  def self.random(params={})
    years_back = params[:year_range] || 5
    year = (rand * (years_back)).ceil + (Time.now.year - years_back)
    month = (rand * 12).ceil
    day = (rand * 31).ceil
    series = [date = Time.local(year, month, day)]
    if params[:series]
      params[:series].each do |some_time_after|
        series << series.last + (rand * some_time_after).ceil
      end
      return series
    end
    date
  end

end

namespace :markus do
  namespace :simulator do
    desc "Generate assignments, random students, submissions and TA data"
    task(:create => :environment) do

      num_of_assignments = Integer(ENV["NUM_OF_ASSIGNMENTS"])
      # If the uer did not provide the environment variable "NUM_OF_ASSIGNMENTS",
      # the simulator will create two assignments
      if ENV["NUM_OF_ASSIGNMENTS"].nil?
        num_of_assignments = 2
      end
      curr_assignment_num = 1
      # This variable is to be put in the assignment short identifier. The
      # usage if this variable will be explained later.
      curr_assignment_num_for_name = 1
      while(curr_assignment_num <= num_of_assignments) do
        puts "start generating assignment #" + curr_assignment_num.to_s + "... "
        assignment_short_identifier = "A" + curr_assignment_num_for_name.to_s
        # There might be other assignemnts' whihc has the same short_identifier
        # as assignment_short_identifier. To solve thsi problem, keep
        # increasing curr_assignment_num_for_name by one till we get a
        # assignment_short_identifier which does not exist in the database.
        while (Assignment.find_by_short_identifier( assignment_short_identifier)) do
          curr_assignment_num_for_name += 1
          assignment_short_identifier = "A" + curr_assignment_num_for_name.to_s
        end

        puts assignment_short_identifier
        assignment = Assignment.create
        rule = NoLateSubmissionRule.new
        assignment.short_identifier = assignment_short_identifier
        assignment.description = "Conditionals and Loops"
        assignment.message = "Learn to use conditional statements, and loops."

        # The default assignemnt_due_date is a randon date whithin six months
        # before and six months after now.
        assignment_due_date = Time.random(:year_range=>1)
        # If the user wants the assignment's due date to be passed, set the
        # assignment_due_date to Time.now.
        if (!ENV["PASSED_DUE_DATE"].nil? and ENV["PASSED_DUE_DATE"] == "true")
          assignment_due_date = Time.now
        # If the user wants the assignemnt's due date to be not passed, then
        # set  assignment_due_date to two months from now.
        elsif (!ENV["PASSED_DUE_DATE"].nil? and ENV["PASSED_DUE_DATE"] == "false")
          assignment_due_date = Time.now + 5184000
        end
        assignment.due_date = assignment_due_date

        assignment.group_min = 1
        assignment.group_max = 1
        assignment.student_form_groups = false
        assignment.group_name_autogenerated = true
        assignment.group_name_displayed = false
        assignment.repository_folder = assignment_short_identifier
        assignment.submission_rule = rule
        assignment.invalid_override = false
        assignment.marking_scheme_type = Assignment::MARKING_SCHEME_TYPE[:rubric]
        assignment.display_grader_names_to_students = false
        assignment.assignment_stat = AssignmentStat.new
        assignment.save!

        puts "Creating the Rubric for " + assignment_short_identifier + " ..."
        weight_1 = rand(5) + 5
        weight_2 = rand(5) + 5
        weight_3 = rand(5) + 5
        weight_4 = rand(5) + 5
        rubric_criterias = [{
            :rubric_criterion_name => "Uses Conditionals",
            :weight => weight_1},
          {:rubric_criterion_name => "Code Clarity",
            :weight => weight_2}, {
            :rubric_criterion_name => "Code Is Documented",
            :weight => weight_3},
          {:rubric_criterion_name => "Uses For Loop",
            :weight => weight_4}]
        default_levels = {:level_0_name => "Quite Poor", :level_0_description => "This criterion was not satisifed whatsoever", :level_1_name => "Satisfactory", :level_1_description => "This criterion was satisfied", :level_2_name => "Good", :level_2_description => "This criterion was satisfied well", :level_3_name => "Great", :level_3_description => "This criterion was satisfied really well!", :level_4_name => "Excellent", :level_4_description => "This criterion was satisfied excellently"}
        rubric_criterias.each do |rubric_criteria|
          rc = RubricCriterion.create
          rc.update_attributes(rubric_criteria)
          rc.update_attributes(default_levels)
          rc.assignment = assignment
          rc.save!
          assignment.rubric_criteria << rc
        end
        assignment.save

        puts assignment_short_identifier + " mark is " + assignment.total_mark.to_s
        puts "Finish creating assignment" + assignment_short_identifier + "."

        puts "Generating TAs ..."
        num_of_tas = Integer(ENV["NUM_OF_TAS"])
        # If the uer did not provide the environment variable "NUM_OF_TAS"
        if ENV["NUM_OF_TAS"].nil?
          num_of_tas = rand(3) + 1
        end
        curr_ta_num = 1
        # student_num is the student number for students created in this
        # assignment. The number will increase by one for the next created
        # student.
        student_num = 1
        while (curr_ta_num <= num_of_tas) do
          puts ''
          # Form a new TA membership with some default value.
          ta_last_name = curr_assignment_num_for_name.to_s + curr_ta_num.to_s +
            student_num.to_s
          ta_user_name = "TA" + ta_last_name

          puts "Start generating " + ta_user_name.to_s + "... "
          ta = Ta.create(:user_name => ta_user_name, :first_name => 'TA', :last_name => ta_last_name)

          puts "Finish creating TA #" + ta_user_name.to_s + "... "

          puts "Start generating students ..."

          num_of_students = Integer(ENV["NUM_OF_STUDENTS"])
          # If the uer did not provide the environment variable "NUM_OF_STUDENTS"
          if ENV["NUM_OF_STUDENTS"].nil?
            num_of_students = rand(6) + 10
          end

          curr_student_num = 1
          while (curr_student_num <= num_of_students) do
            student_last_name = curr_assignment_num_for_name.to_s + curr_ta_num.to_s +
              student_num.to_s

            student_user_name = "Student # " +  student_last_name

            puts "Start generating " + student_user_name.to_s + "... "
            student = Student.create(:user_name => student_user_name,
                    :last_name => student_last_name,
                    :first_name => 'Student',
                    :type => 'Student')

            student.save!
            student.create_group_for_working_alone_student(assignment.id)
            student.save
            grouping = student.accepted_grouping_for(assignment.id)
            grouping.save!
            grouping.create_grouping_repository_folder
            grouping.save!
            grouping.add_tas([ta])

            assignment.groupings << grouping
            assignment.save!

            assignment_repo = grouping.group.repo
            txn = assignment_repo.get_transaction(student_user_name)
            file_data = %|class assignment {
        // This method should sum only positive values
        public static void main(String args[]) {
          // First, I create an array
          double[] ar = {-1.2, 0.5, -0.15, 55.2, -5.2, 8.5, -9.12}
          int sum = 0;
          for (double num : ar) {
            if (num > 0) {
              sum += num
            }
          }
          System.out.println("The sum of the positive values is: " + sum);
        }
      }|
            folder_name = assignment_short_identifier + "/" + assignment_short_identifier + ".java"
            puts folder_name
            txn.add(folder_name, file_data, 'text/java')
            assignment_repo.commit(txn)
            assignment.save!

            num_of_submissions = rand(4)
            curr_submission_num = 1

            while (curr_submission_num <= num_of_submissions)
              date_of_submission = Time.random(:year_range=>1)
              submission = Submission.create_by_timestamp(grouping, date_of_submission)
              submission.save!
              curr_submission_num += 1
              submission.save!
            end

            submission = grouping.current_submission_used
            # If marked is 1, then the accepted submission, if any, is partially marked;
            # if marked is 2, then it is completely marked
            marked = rand(3)
            if (marked == 1 and !submission.nil?)
              @result = submission.get_latest_result
              @result.marking_state = Result::MARKING_STATES[:partial]
              @result.save!
              submission.save!
            elsif (marked == 2 and  !submission.nil?)
              result = submission.get_latest_result
              # Create a mark for each criterion and attach to result
              puts "Generating mark ..."
              assignment.rubric_criteria.each do |criterion|
                # Save a mark for each criterion
                m = Mark.new()
                m.markable_type = "RubricCriterion"
                m.markable_id = criterion.id
                m.result = result
                m.mark = rand(4) # assign some random mark
                m.save!
              end

              result.overall_comment = "Assignment goals pretty much met, but some things would need improvement. Other things are absolutely fantastic! Seriously, this is just some random text."
              result.marking_state = Result::MARKING_STATES[:complete]
              result.released_to_students = true
              result.save!
              submission.save!
            end


            puts "Finish creating " + student_user_name.to_s
            curr_student_num += 1
            student_num += 1

          end # end of students while loop

          curr_ta_num = curr_ta_num + 1
        end # end of TAs while loop

        curr_assignment_num += 1
        curr_assignment_num_for_name += 1
      end # end of the assignment while loop

    # Create s standard admin; if it does not already exist.
    if (!Admin.find_by_user_name("a"))
      Admin.create(:user_name => 'a', :first_name => 'admin', :last_name => 'admin')
    end

    # Create Reid; if it does not already exist.
    if (!Admin.find_by_user_name("reid"))
      Admin.create(:user_name => 'reid', :first_name => 'Karen', :last_name => 'Reid')
    end

    end
  end
end
