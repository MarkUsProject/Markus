require File.dirname(__FILE__) + '/../selenium_helper'

class AssignmentPropertiesTest < Test::Unit::TestCase

  def setup
    @verification_errors = []
    @browser = create_selenium_client("AssignmentPropertiesTest");
  end

  def teardown
    @browser.stop
    assert_equal [], @verification_errors
  end

  def test_no_warning_displayed_when_changing_marking_scheme_on_new_assignment
    login_with_user "olm_admin"

    @browser.open '/main/assignments/new'
    @browser.wait_for_page_to_load "30000"

    #Assert the warning message is not present when loading the page
    assert_warning_visibility(false)

    @browser.click "assignment_marking_scheme_type_flexible"
    assert_warning_visibility(false)

    @browser.click "assignment_marking_scheme_type_rubric"
    assert_warning_visibility(false)
  end

  def test_warning_when_changing_from_flexible_to_rubric
     login_with_user "olm_admin"

     @browser.open '/main/assignments'
     @browser.wait_for_page_to_load "30000"

     @browser.click "link=exact:How flexible can you get?:"
     @browser.wait_for_page_to_load "30000"

     #Assert the warning message is not present when loading the page
     assert_warning_visibility(false)

     @browser.click "assignment_marking_scheme_type_flexible"
     assert_warning_visibility(false)

     @browser.click "assignment_marking_scheme_type_rubric"
     assert_warning_visibility(true)

     @browser.click "assignment_marking_scheme_type_flexible"
     assert_warning_visibility(false)
   end

   def test_warning_when_changing_from_rubric_to_flexible
      login_with_user "olm_admin"

      @browser.open '/main/assignments'
      @browser.wait_for_page_to_load "30000"

      @browser.click "link=exact:Captain Sparrow:"
      @browser.wait_for_page_to_load "30000"

      #Assert the warning message is not present when loading the page
      assert_warning_visibility(false)

      @browser.click "assignment_marking_scheme_type_rubric"
      assert_warning_visibility(false)

      @browser.click "assignment_marking_scheme_type_flexible"
      assert_warning_visibility(true)

      @browser.click "assignment_marking_scheme_type_rubric"
      assert_warning_visibility(false)
    end

  def test_create_assignment_with_default_values
    login_with_user "olm_admin"

    assignment_short_identifier = "NewSeleniumAssignment"

    @browser.open '/main/assignments/new'
    @browser.wait_for_page_to_load "30000"

    @browser.type "assignment_short_identifier", assignment_short_identifier
    @browser.type "assignment_description", "NameSeleniumAssignment"
    @browser.type "assignment_message", "This is a message"
    @browser.type "assignment_due_date", "2030-11-27 00:00"
    @browser.click "assignment_marking_scheme_type_rubric"
    @browser.click "assignment_submit"
    @browser.wait_for_page_to_load "30000"
    begin
        assert @browser.is_text_present("Successfully created assignment")
    rescue Test::Unit::AssertionFailedError
        @verification_errors << $!
    end

    #Look into the database if the assignment has been created correctly
    assignment_created = Assignment.find(:first, :conditions => [ "short_identifier = ?", assignment_short_identifier])

    assert_equal("NameSeleniumAssignment", assignment_created.description)
    assert_equal("This is a message", assignment_created.message)
    assert_equal("2030-11-27", assignment_created.due_date.to_date.to_s)
    assert_equal(1, assignment_created.group_min)
    assert_equal(1, assignment_created.group_max)
    assert_equal(false, assignment_created.student_form_groups)
    assert_equal(false, assignment_created.group_name_autogenerated)
    assert_equal(assignment_short_identifier, assignment_created.repository_folder)
    assert_equal(Assignment::MARKING_SCHEME_TYPE[:rubric], assignment_created.marking_scheme_type)
  end

  def test_create_assignment_with_empty_values
    login_with_user "olm_admin"

    @browser.open '/main/assignments/new'
    @browser.wait_for_page_to_load "30000"

    @browser.click "assignment_submit"
    @browser.wait_for_page_to_load "30000"

    begin
        assert @browser.is_text_present("Short identifier can't be blank")
    rescue Test::Unit::AssertionFailedError
        @verification_errors << $!
    end

    begin
        assert @browser.is_text_present("Repository folder can't be blank")
    rescue Test::Unit::AssertionFailedError
        @verification_errors << $!
    end

    begin
        assert @browser.is_text_present("Due date is not a valid date")
    rescue Test::Unit::AssertionFailedError
        @verification_errors << $!
    end
  end

  def test_create_assignment_with_date_due_in_the_past
    login_with_user "olm_admin"

    @browser.open '/main/assignments/new'
    @browser.wait_for_page_to_load "30000"

    @browser.type "assignment_due_date", "1999-11-27 00:00"

    assert_equal I18n.t(:past_due_date_edit_warning), @browser.get_alert
  end

  def test_warning_existing_assignment_with_date_due_in_the_past
    login_with_user "olm_admin"

    @browser.open '/main/assignments'
    @browser.wait_for_page_to_load "30000"

    @browser.click "link=exact:How flexible can you get?:"
    @browser.wait_for_page_to_load "30000"

    begin
        assert @browser.is_text_present(I18n.t(:past_due_date_warning))
    rescue Test::Unit::AssertionFailedError
        @verification_errors << $!
    end

    assignment_due_date = Date.parse(@browser.get_value("assignment_due_date"))
    assert assignment_due_date < DateTime::now
  end

  def assert_warning_visibility(isVisible)
    begin
    assert_equal(isVisible, @browser.is_visible('marking_scheme_notice'))
    rescue Test::Unit::AssertionFailedError
      @verification_errors << $!
    end
  end

end