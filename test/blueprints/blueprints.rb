require 'machinist/active_record'
require 'faker'

Admin.blueprint do
  user_name {"machinist_admin-#{sn}"}
  first_name {Faker::Name.first_name}
  last_name {Faker::Name.last_name}
  api_key {"API_KEY_N_#{sn}"}
end

AnnotationCategory.blueprint do
  assignment {Assignment.make!}
  annotation_category_name {"Machinist Annotation Category #{sn}"}
end

AnnotationText.blueprint do
  annotation_category {AnnotationCategory.make}
  content {'content'}
end

Assignment.blueprint do
  short_identifier {"machinist_A#{sn}"}
  description {Faker::Lorem.sentence(2)}
  message {Faker::Lorem.paragraphs}
  due_date {rand(50).days.from_now}
  group_min {2}
  group_max {4}
  student_form_groups {true}
  invalid_override {false}
  group_name_autogenerated {true}
  repository_folder {"repo/#{short_identifier}"}
  marking_scheme_type {'rubric'}
  submission_rule {NoLateSubmissionRule.make}
  allow_web_submits {true}
  display_grader_names_to_students {false}
  section_due_dates_type {false}
  enable_test {true}
  tokens_per_day {10}
  assign_graders_to_criteria {false}
  assignment_stat {AssignmentStat.make}
end

AssignmentFile.blueprint do
  assignment {Assignment.make}
  filename { "#{Faker::Lorem.words(1)[0]}.java" }
end

AssignmentStat.blueprint do
  assignment_id {0}
end

CriterionTaAssociation.blueprint do
  criterion
  ta {Ta.make}
end

ExtraMark.blueprint do
  extra_mark {2}
  result {Result.make!}
  unit {'percentage'}
end

FlexibleCriterion.blueprint do
  assignment {Assignment.make(:marking_scheme_type => 'flexible')}
  flexible_criterion_name {"machinist_flexible_criterion_#{sn}"}
  description {Faker::Lorem.sentence(2)}
  position {1} # override if many for the same assignment
  max {10}
  assigned_groups_count {0}
end

Grade.blueprint do
  grade_entry_item {GradeEntryItem.make}
  grade_entry_student {GradeEntryStudent.make}
  grade {0}
end

GracePeriodDeduction.blueprint do
  membership  {StudentMembership.make}
  deduction {20}
end

GracePeriodSubmissionRule.blueprint do
  assignment_id {0}
  type {'GracePeriodSubmissionRule'}
end

GradeEntryForm.blueprint do
  short_identifier {"Grade_Entry-#{sn}"}
  description {Faker::Lorem.sentence(2)}
  message {Faker::Lorem.paragraphs}
  date
end

GradeEntryItem.blueprint do
  grade_entry_form {GradeEntryForm.make}
  name {Faker::Name.name}
  out_of {10}
end

GradeEntryStudent.blueprint do
  grade_entry_form {GradeEntryForm.make}
  user {Student.make}
  released_to_student {false}
end

Group.blueprint do
  group_name { "machinist_group#{sn}" }
  repo_name {group_name}
end

Grouping.blueprint do
  grouping_queue { nil }
  group {Group.make!}
  assignment {Assignment.make!}
  criteria_coverage_count {0}
end

ImageAnnotation.blueprint do
  x1 {0}
  x2 {10}
  y1 {0}
  y2 {10}
  annotation_text {AnnotationText.make!(
    :annotation_category => AnnotationCategory.make(:assignment => SubmissionFile.make!.submission.grouping.assignment)
    )}
  submission_file {SubmissionFile.make!}
  annotation_number {rand(1000)+1}
end

Mark.blueprint do
  result {Submission.make.result}
  markable {RubricCriterion.make(:assignment => result.submission.grouping.assignment)}
  mark {1}
end

Mark.blueprint(:rubric) do
  result {Submission.make.result}
  markable {RubricCriterion.make(:assignment => result.submission.grouping.assignment)}
end

Mark.blueprint(:flexible) do
  result {Submission.make.result}
  markable {FlexibleCriterion.make(:assignment => result.submission.grouping.assignment)}
end

Note.blueprint do
  noteable_type  {'Grouping'}
  noteable_id {Grouping.make.id}
  user {Admin.make}
  notes_message  {Faker::Lorem.paragraphs}
end

NoLateSubmissionRule.blueprint do
  assignment_id {0}
end

Result.blueprint do
  submission {Submission.make}
  marking_state {Result::MARKING_STATES[:partial]}
  total_mark {0}
end

RubricCriterion.blueprint do
  assignment {Assignment.make(:marking_scheme_type => 'rubric')}
  rubric_criterion_name {"machinist_rubric_criterion_#{sn}"}
  position {1}  # override if many for the same assignment
  weight {1}
  assigned_groups_count {0}
  level_0_name {'Horrible'}
  level_1_name {'Poor'}
  level_2_name {'Satisfactory'}
  level_3_name {'Good'}
  level_4_name {'Excellent'}
end

Section.blueprint do
  name {Faker::Name.name}
end

SectionDueDate.blueprint do
  section {Section.make}
  assignment {Assignment.make}
  due_date {rand(50).days.from_now}
end

Student.blueprint do
  user_name { "machinist_student-#{sn}" }
  first_name {Faker::Name.first_name}
  last_name {Faker::Name.last_name}
  section {Section.make}
  grace_credits {5}
end

Student.blueprint(:hidden) do
  hidden { true }
end

StudentMembership.blueprint do
  user {Student.make!}
  grouping {Grouping.make!}
  membership_status {StudentMembership::STATUSES[:pending]}
end

Submission.blueprint do
  grouping {Grouping.make!}
  submission_version {1}
  submission_version_used {true}
  revision_number {1}
  revision_timestamp {1.days.ago}
  remark_result_id {nil}
end

SubmissionFile.blueprint do
  submission {Submission.make}
  filename { "#{Faker::Lorem.words(1)[0]}.c" }
  path {"#{Faker::Lorem.words(1)[0]}.java"}
end

PenaltyDecayPeriodSubmissionRule.blueprint do
  assignment_id {0}
  type {'PenaltyDecayPeriodSubmissionRule'}
end

PenaltyPeriodSubmissionRule.blueprint do
  assignment_id {0}
  type {'PenaltyPeriodSubmissionRule'}
end

Period.blueprint do
  submission_rule_id {0}
  hours {rand(24)}
end

Ta.blueprint do
  user_name { "machinist_ta-#{sn}" }
  first_name {Faker::Name.first_name}
  last_name {Faker::Name.last_name}
  api_key {"API_KEY_N_#{sn}"}
end

TaMembership.blueprint do
  user {Ta.make}
  grouping {Grouping.make}
  membership_status {'pending'}
end

TestFile.blueprint do
  assignment_id {0}
  filename { "#{Faker::Lorem.words(1)[0]}.ruby" }
  is_private {false}
end

TestResult.blueprint do
  submission {Submission.make}
  filename { "#{Faker::Lorem.words(1)[0]}.java" }
  file_content {Faker::Lorem.sentence(2)}
end

TextAnnotation.blueprint do
  line_start {0}
  line_end {1}
  annotation_text {AnnotationText.make!(
    :annotation_category => AnnotationCategory.make(:assignment => SubmissionFile.make!.submission.grouping.assignment)
    )}
  submission_file {SubmissionFile.make!}
  annotation_number {rand(1000)+1}
end

Token.blueprint do
  grouping {Grouping.make!}
  tokens {5}
end
