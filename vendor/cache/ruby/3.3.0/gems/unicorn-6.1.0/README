= unicorn: Rack HTTP server for fast clients and Unix

unicorn is an HTTP server for Rack applications designed to only serve
fast clients on low-latency, high-bandwidth connections and take
advantage of features in Unix/Unix-like kernels.  Slow clients should
only be served by placing a reverse proxy capable of fully buffering
both the the request and response in between unicorn and slow clients.

== Features

* Designed for Rack, Unix, fast clients, and ease-of-debugging.  We
  cut out everything that is better supported by the operating system,
  {nginx}[https://nginx.org/] or {Rack}[https://rack.github.io/].

* Compatible with Ruby 2.0.0 and later.

* Process management: unicorn will reap and restart workers that
  die from broken apps.  There is no need to manage multiple processes
  or ports yourself.  unicorn can spawn and manage any number of
  worker processes you choose to scale to your backend.

* Load balancing is done entirely by the operating system kernel.
  Requests never pile up behind a busy worker process.

* Does not care if your application is thread-safe or not, workers
  all run within their own isolated address space and only serve one
  client at a time for maximum robustness.

* Builtin reopening of all log files in your application via
  USR1 signal.  This allows logrotate to rotate files atomically and
  quickly via rename instead of the racy and slow copytruncate method.
  unicorn also takes steps to ensure multi-line log entries from one
  request all stay within the same file.

* nginx-style binary upgrades without losing connections.
  You can upgrade unicorn, your entire application, libraries
  and even your Ruby interpreter without dropping clients.

* transparent upgrades using systemd socket activation is
  supported since unicorn 5.0

* before_fork and after_fork hooks in case your application
  has special needs when dealing with forked processes.  These
  should not be needed when the "preload_app" directive is
  false (the default).

* Can be used with copy-on-write-friendly GC in Ruby 2.0+
  to save memory (by setting "preload_app" to true).

* Able to listen on multiple interfaces including UNIX sockets,
  each worker process can also bind to a private port via the
  after_fork hook for easy debugging.

* Simple and easy Ruby DSL for configuration.

* Decodes chunked requests on-the-fly.

== License

unicorn is copyright 2009-2018 by all contributors (see logs in git).
It is based on Mongrel 1.1.5.
Mongrel is copyright 2007 Zed A. Shaw and contributors.

unicorn is licensed under (your choice) of the GPLv2 or later
(GPLv3+ preferred), or Ruby (1.8)-specific terms.
See the included LICENSE file for details.

unicorn is 100% Free Software (including all development tools used).

== Install

The library consists of a C extension so you'll need a C compiler
and Ruby development libraries/headers.

You may install it via RubyGems on RubyGems.org:

  gem install unicorn

You can get the latest source via git from the following locations
(these versions may not be stable):

  https://yhbt.net/unicorn.git
  https://repo.or.cz/unicorn.git (mirror)

You may browse the code from the web:

* https://yhbt.net/unicorn.git
* https://repo.or.cz/w/unicorn.git (gitweb)

See the HACKING guide on how to contribute and build prerelease gems
from git.

== Usage

=== Rack (including Rails 3+) applications

In APP_ROOT, run:

  unicorn

unicorn will bind to all interfaces on TCP port 8080 by default.
You may use the +--listen/-l+ switch to bind to a different
address:port or a UNIX socket.

=== Configuration File(s)

unicorn will look for the config.ru file used by rackup in APP_ROOT.

For deployments, it can use a config file for unicorn-specific options
specified by the +--config-file/-c+ command-line switch.  See
Unicorn::Configurator for the syntax of the unicorn-specific options.
The default settings are designed for maximum out-of-the-box
compatibility with existing applications.

Most command-line options for other Rack applications (above) are also
supported.  Run `unicorn -h` to see command-line options.

== Disclaimer

There is NO WARRANTY whatsoever if anything goes wrong, but
{let us know}[link:ISSUES.html] and we'll try our best to fix it.

unicorn is designed to only serve fast clients either on the local host
or a fast LAN.  See the PHILOSOPHY and DESIGN documents for more details
regarding this.

Due to its ability to tolerate crashes and isolate clients, unicorn
is unfortunately known to prolong the existence of bugs in applications
and libraries which run on top of it.

== Contact

All feedback (bug reports, user/development dicussion, patches, pull
requests) go to the mailing list/newsgroup.  See the ISSUES document for
information on the {mailing list}[mailto:unicorn-public@yhbt.net].

The mailing list is archived at https://yhbt.net/unicorn-public/

Read-only NNTP access is available at:
nntps://news.public-inbox.org/inbox.comp.lang.ruby.unicorn and
nntp://news.gmane.io/gmane.comp.lang.ruby.unicorn.general

Read-only IMAP access is also avaialble at:
imaps://yhbt.net/inbox.comp.lang.ruby.unicorn.0 and
imap://7fh6tueqddpjyxjmgtdiueylzoqt6pt7hec3pukyptlmohoowvhde4yd.onion/inbox.comp.lang.ruby.unicorn.0
The AUTH=ANONYMOUS mechanism is supported, as is any username+password
combination.

For the latest on unicorn releases, you may also finger us at
unicorn@yhbt.net or check our NEWS page (and subscribe to our Atom
feed).
