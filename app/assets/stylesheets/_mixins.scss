/**
 * Various mixins that allow for easier cross-browser support.
 */

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
          border-radius: $radius;
}

/** Only the top left and top right corners. */
@mixin border-radius-top($radius) {
  -webkit-border-top-right-radius: $radius;
   -webkit-border-top-left-radius: $radius;
      -moz-border-radius-topright: $radius;
       -moz-border-radius-topleft: $radius;
          border-top-right-radius: $radius;
           border-top-left-radius: $radius;
}

/** Only the bottom left and bottom right corners. */
@mixin border-radius-bottom($radius) {
  -webkit-border-bottom-right-radius: $radius;
   -webkit-border-bottom-left-radius: $radius;
      -moz-border-radius-bottomright: $radius;
       -moz-border-radius-bottomleft: $radius;
          border-bottom-right-radius: $radius;
           border-bottom-left-radius: $radius;
}

/** Multiple box-shadows can be defined, each separated by a comma. */
@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow;
     -moz-box-shadow: $shadow;
          box-shadow: $shadow;
}

/** A linear gradient going from top to bottom. */
@mixin background-gradient($start, $end) {
  background: -webkit-gradient(linear, 0% 0%, 0% 100%, from($start), to($end));
  background: -webkit-linear-gradient(top, $start, $end);
  background: -moz-linear-gradient(top, $start, $end);
  background: -o-linear-gradient(top, $start, $end);
  background: linear-gradient(top, $start, $end);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='$start', endColorstr='$end');
  background-color: $start;
}

/** The transition uses a timing function of "ease" and a 0s delay by default,
    if no values are provided. */
@mixin transition($property, $duration, $timing-function:"ease", $delay:"0s") {
  -webkit-transition: $property $duration #{$timing-function} #{$delay};
     -moz-transition: $property $duration #{$timing-function} #{$delay};
      -ms-transition: $property $duration #{$timing-function} #{$delay};
       -o-transition: $property $duration #{$timing-function} #{$delay};
          transition: $property $duration #{$timing-function} #{$delay};
}

@mixin transform($value...) {
  -webkit-transform: $value;
     -moz-transform: $value;
      -ms-transform: $value;
       -o-transform: $value;
          transform: $value;
}

@mixin transform-origin($value) {
  -webkit-transform-origin: $value;
     -moz-transform-origin: $value;
      -ms-transform-origin: $value;
       -o-transform-origin: $value;
          transform-origin: $value;
}

@mixin animation($value...) {
  -webkit-animation: $value;
     -moz-animation: $value;
      -ms-animation: $value;
       -o-animation: $value;
          animation: $value;
}

/** For easier size breakpoints. */
$breakpoints: (
  'tiny':   ( max-width:  360px ),
  'small':  ( max-width:  500px ),
  'mobile': ( max-width:  745px ),
  'medium': ( max-width:  990px ),
  'large':  ( max-width: 1040px )
);

@mixin breakpoint($name) {
  @if map-has-key($breakpoints, $name) {
    @media #{inspect(map-get($breakpoints, $name))} {
      @content;
    }
  }
  @else {
    @media ("#{$name}") {
      @content;
    }
  }
}
