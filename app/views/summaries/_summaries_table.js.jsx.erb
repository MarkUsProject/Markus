<script type='text/jsx'>
  /** @jsx React.DOM */

  var SummariesTable = React.createClass({
    getDefaultProps: function() {
      var columns = [
        {
          id: 'group_name',
          content: '<%= j raw I18n.t('summaries_index.group_name') %>',
          sortable: true,
          compare: compare_anchor_text,
          searchable: true
        },
        {
          id: 'repository',
          content: '<%= j raw I18n.t('summaries_index.repository') %>',
          sortable: true,
          compare: compare_anchor_text,
          searchable: true
        },
        {
          id: 'commit_date',
          content: '<%= j raw I18n.t('summaries_index.commit_date') %>',
          sortable: true,
          compare: compare_dates,
          searchable: true
        },
        {
          id: 'marking_state',
          content: '<%= j raw I18n.t('summaries_index.marking_state') %>',
          sortable: true,
          searchable: false
        },
        {
          id: 'final_grade',
          content: '<%= j raw I18n.t('summaries_index.final_grade') %>',
          sortable: true,
          compare: compare_numeric_values,
          searchable: true
        },
        <%= raw @section_column  %>
      ];
      <% for criterion in @criteria %>
        columns.push({
          id: 'criterion_' + <%= criterion.id %>,
          content: '<%= criterion.has_attribute?('flexible_criterion_name') ?
                       criterion.flexible_criterion_name :
                       criterion.rubric_criterion_name %>',
          sortable: true,
          compare: compare_numeric_values,
          searchable: false
        });
      <% end %>

      var filters = [
        {
          name: 'all',
          text: '<%= j raw I18n.t(:'browse_submissions.show_all') %>',
          func: function(submission) {
            return true;
          }
        },
        {
          name: 'unmarked',
          text: '<%= j raw I18n.t(:'browse_submissions.show_unmarked') %>',
          func: function(submission) {
            return submission.state == 'unmarked';
          }
        },
        {
          name: 'partial',
          text: '<%= j raw I18n.t(:'browse_submissions.show_partial') %>',
          func: function(submission) {
            return submission.state == 'partial';
          }
        },
        {
          name: 'complete',
          text: '<%= j raw I18n.t(:'browse_submissions.show_complete') %>',
          func: function(submission) {
            return submission.state == 'complete';
          }
        },
        {
          name: 'released',
          text: '<%= j raw I18n.t(:'browse_submissions.show_released') %>',
          func: function(submission) {
            return submission.state == 'released';
          }
        }
      ];
      return {columns: columns, filters: filters};
    },
    getInitialState: function() {
      return {
        summaries: []
      };
    },
    componentWillMount: function() {
      this.refresh();
    },
    // Asks for new info from backend and sets props accordingly.
    refresh: function() {
      document.getElementById('working').style.display = '';
      jQuery.ajax({
        url: 'summaries/populate',
        method: 'GET',
        dataType: 'json',
        success: function(data) {
          this.setState({
            summaries: data,
          });
        }.bind(this),
        error: function(xhr, status, text) {
          var error = text + ': ' + xhr.responseText;
          this.setState({
            error: error
          });
        }.bind(this),
        complete: function() {
          document.getElementById('working').style.display = 'none';
        }
      });
    },
    render: function() {

      var summaries_data = this.state.summaries.map(function(summary) {
        var s = {};
        s['id'] = summary.id;
        s['class_name'] = summary.class_name;
        s['group_name'] = <span dangerouslySetInnerHTML={{__html: summary.group_name}} />;
        s['repository'] = <span dangerouslySetInnerHTML={{__html: summary.repository}} />;
        s['commit_date'] = <span dangerouslySetInnerHTML={{__html: summary.commit_date}} />;
        s['marking_state'] = <span dangerouslySetInnerHTML={{__html: summary.marking_state}} />;
        s['final_grade'] = summary.final_grade;
        s['state'] = summary.state;
        <% for criterion in @criteria %>
          var key = 'criterion_' + '<%= criterion.id %>';
          s[key] = summary.criteria[key];
        <% end %>
        return s;
      });

      return (
        <div>
          <Table data={summaries_data}
            columns={this.props.columns}
            filters={this.props.filters}
            filter_type={true}
            search_placeholder={'<%= j raw I18n.t('summaries_index.search_summaries') %>'}/>
        </div>
      );
    }
  });

  React.renderComponent(<SummariesTable />, document.getElementById('summaries_table'));
</script>
