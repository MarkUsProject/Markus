<script type='text/jsx'>
  /** @jsx React.DOM */

  var SummariesTable = React.createClass({

    getDefaultProps: function() {
      var columns = [
        {
          id: 'group_name',
          content: '<%= j raw I18n.t('summaries_index.group_name') %>',
          sortable: true,
          compare: compare_anchor_text,
          searchable: true
        },
        {
          id: 'repository',
          content: '<%= j raw I18n.t('summaries_index.repository') %>',
          sortable: true,
          compare: compare_anchor_text,
          searchable: true
        },
        {
          id: 'commit_date',
          content: '<%= j raw I18n.t('summaries_index.commit_date') %>',
          sortable: true,
          compare: compare_dates,
          searchable: true
        },
        {
          id: 'marking_state',
          content: '<%= j raw I18n.t('summaries_index.marking_state') %>',
          sortable: true,
          searchable: false
        },
        {
          id: 'final_grade',
          content: '<%= j raw I18n.t('summaries_index.final_grade') %>',
          sortable: true,
          compare: compare_numeric_values,
          searchable: true
        },
        {
          id: 'total_extra_points',
          content: '<%= j raw I18n.t('marker.marks.bonus_deductions') %>',
          sortable: true,
          compare: compare_numeric_values,
          searchable: true
        },
        <%= raw @section_column  %>
      ];

      <% for criterion in @criteria %>
        columns.push({
          id: 'criterion_' + '<%= criterion.class.to_s %>' + '_' + <%= criterion.id %>,
          content: '<%= criterion.name %>',
          sortable: true,
          compare: compare_numeric_values,
          searchable: false
        });
      <% end %>

      var filters = [
        {
          name: 'all',
          text: '<%= j raw I18n.t(:'browse_submissions.show_all') %>',
          func: function(submission) {
            return true;
          }
        },
        {
          name: 'unmarked',
          text: '<%= j raw I18n.t(:'browse_submissions.show_unmarked') %>',
          func: function(submission) {
            return submission.state === 'unmarked';
          }
        },
        {
          name: 'partial',
          text: '<%= j raw I18n.t(:'browse_submissions.show_partial') %>',
          func: function(submission) {
            return submission.state === 'partial';
          }
        },
        {
          name: 'complete',
          text: '<%= j raw I18n.t(:'browse_submissions.show_complete') %>',
          func: function(submission) {
            return submission.state === 'complete';
          }
        },
        {
          name: 'released',
          text: '<%= j raw I18n.t(:'browse_submissions.show_released') %>',
          func: function(submission) {
            return submission.state === 'released';
          }
        }
      ];
      return {columns: columns, filters: filters};
    },

    getInitialState: function() {
      return {
        summaries: []
      };
    },

    componentWillMount: function() {
      this.refresh();
    },

    // Asks for new info from backend and sets props accordingly.
    refresh: function() {
      document.getElementById('working').style.display = '';

      jQuery.ajax({
        url: 'summaries/populate',
        method: 'GET',
        dataType: 'json',
        success: function(data) {
          this.setState({
            summaries: data
          });
        }.bind(this),
        complete: function() {
          document.getElementById('working').style.display = 'none';
        }
      });
    },

    renderMarkingState: function(state) {
      if (state === 'unmarked') {
        return (<%= image_tag('icons/shape_square.png',
                              alt: t('marking_state.not_collected'),
                              title: t('marking_state.not_collected')) %>);
      } else if (state === 'partial') {
        return (<%= image_tag('icons/pencil.png',
                              alt: t('marking_state.in_progress'),
                              title: t('marking_state.in_progress')) %>);
      } else if (state === 'completed') {
        return (<%= image_tag('icons/accept.png',
                              alt: t('marking_state.completed'),
                              title: t('marking_state.completed')) %>);
      } else if (state === 'released') {
        return (<%= image_tag('icons/email_go.png',
                              alt: t('marking_state.released'),
                              title: t('marking_state.released')) %>);
      } else if (state === 'remark') {
        return (<%= image_tag('icons/double_exclamation.png',
                              alt: t('marking_state.remark_requested'),
                              title: t('marking_state.remark_requested')) %>);
      } else {
        return 'Invalid marking state';
      }
    },

    render: function() {
      var summaries_data = this.state.summaries.map(function(summary) {
        var s = {};
        s['id'] = summary.id;
        s['class_name'] = summary.class_name;
        if (summary.name_url === '') {
          s['group_name'] = <span>{summary.name}</span>;
        } else {
          s['group_name'] = <a href={summary.name_url}>{summary.name}</a>;
        };
        if (summary.late_commit) {
          s['commit_date'] = (<span>
            <%= image_tag('icons/error.png',
                          title: t(:past_due_date_edit_result_warning,
                                   href: t(:last_commit))) %>
            {summary.commit_date}
          </span>);
        } else {
          s['commit_date'] = summary.commit_date;
        }
        s['repository'] = <a href={summary.repo_url}>{summary.repo_name}</a>;
        s['marking_state'] = this.renderMarkingState(summary.state);
        s['final_grade'] = summary.final_grade;
        s['section'] = summary.section;
        s['state'] = summary.state;
        s['total_extra_points'] = summary.total_extra_points;
        <% for criterion in @criteria %>
          var key = 'criterion_' + '<%= criterion.class.to_s %>' + '_' + '<%= criterion.id %>';
          s[key] = summary.criteria[key];
        <% end %>
        return s;
      }.bind(this));

      return (
        <Table data={summaries_data}
          columns={this.props.columns}
          filters={this.props.filters}
          filter_type={true}
          search_placeholder={'<%= j raw I18n.t('summaries_index.search_summaries') %>'} />
      );
    }
  });

  React.renderComponent(<SummariesTable />, document.getElementById('summaries_table'));
</script>
