<script type="text/javascript">
//<![CDATA[

var groupings_table = null;

document.observe("dom:loaded", function() {
  // Hide AJAX errors DIV
  $('errors').hide();

  //force the middle column to be moved on the y-axis as the page is scrolled
	Event.observe(document, "scroll", function() {
		//110 is the displacement for "top" for .centreColumnGraders as can be seen in the main.css
		$("centreColumn").setStyle({top: (document.viewport.getScrollOffsets().top + 110) +'px' }); 
	});

  groupings_table = new FilterTable({
    table_id: $('groups'),
    headers: {
      name: {display: "<%= I18n.t('name') %>", sortable: true},
      section: {display: "<%= I18n.t('graders.section') %>", sortable: true},
      members: {display: "<%= I18n.t('graders.graders') %>", sortable: true, sort_with: 'nohtml'},
      coverage: {display: "<%= I18n.t('graders.coverage') if @assignment.assign_graders_to_criteria %>", sortable: true}
    },
    can_select: true,
    can_select_all: true,
    select_all_header: "<%= I18n.t('all') %>",
    can_sort: true,
    row_prefix: "groupings_row_",
    select_name: "groupings[]",
    select_id_prefix: "grouping_select_",
    select_all_top_id: "grouping_select_all_top",
    select_all_bottom_id: "grouping_select_all_bottom",
    selectable_class: "FilterTable_groupings_selectable",
    select_onclick: "check_all(this.id.split('_')[2],this.checked)",
    footer: true,
    default_sort: 'name',
    header_id_prefix: "FilterTable_manage_graders_header_",
    filters: {
      validated: function(row) {
        return row.filter_valid;
      },
      unvalidated: function(row) {
        return !row.filter_valid;
      },
      search: function(row) {
        return (row.name.toLowerCase().indexOf($('search_groupings').value.toLowerCase()) != -1
        || row.graders.toLowerCase().indexOf($('search_groupings').value.toLowerCase()) != -1
        || row.grader_names.toLowerCase().indexOf($('search_groupings').value.toLowerCase()) != -1);
      },
      selection: function(row) {
        return (row.section.toLowerCase() ==
                  $('selection_groupings_sections').value.toLowerCase() ||
                $('selection_groupings_sections').value.toLowerCase() == '');
      }
    },
    after_filter_only_by: function(current_filters, new_filter) {
      $('filter_link_none').removeClassName('filter_selected');
      current_filters.each(function(filter_key) {
        if(filter_key != 'search') {
          $('filter_link_' + filter_key).removeClassName('filter_selected');
        }
      });
      $('filter_link_' + new_filter).addClassName('filter_selected');
    },
    after_clear_filters: function(current_filters) {
      current_filters.each(function(filter_key) {
        if(filter_key != 'search') {
          $('filter_link_' + filter_key).removeClassName('filter_selected');
        }
      });
      $('filter_link_none').addClassName('filter_selected');
    },
    sorts: {
      nohtml: function(a, b) {
        return a[FILTERTABLE_SORT].stripTags().toLowerCase() > b[FILTERTABLE_SORT].stripTags().toLowerCase() ? 1 : -1;
        }
    },
    total_count_id: 'all_groupings_count',
    filter_count_ids: {
      validated: 'valid_groupings_count',
      unvalidated: 'invalid_groupings_count'
    }
  });


  graders_table = new FilterTable({
    table_id: $('graders'),
    headers: {
      user_name: {display: "<%= I18n.t('user.user_name') %>", sortable: true},
      full_name: {display: "<%= I18n.t('user.full_name') %>", sortable: true},
      num_groups: {display: "<%= I18n.t('groups.groups') %>", sortable: true},
      num_criteria: {display: "<%= I18n.t('criteria') %>", sortable: true}
    },
    can_select: true,
    can_select_all: true,
    select_all_header: "<%= I18n.t('all') %>",
    can_sort: true,
    row_prefix: "graders_row_",
    select_name: "graders[]",
    select_id_prefix: "grader_select_",
    select_all_top_id: "grader_select_all_top",
    select_all_bottom_id: "grader_select_all_bottom",
    selectable_class: "FilterTable_graders_selectable",
    footer: true,
    default_sort: 'user_name',
    default_filters: [],
    filters: {
      assigned: function(row) {
        return row.filter_grader_assigned;
      },
      unassigned: function(row) {
        return !row.filter_grader_assigned;
      },
      search: function(row) {
        return (row.user_name.toLowerCase().indexOf($('search_graders').value.toLowerCase()) != -1
        || row.first_name.toLowerCase().indexOf($('search_graders').value.toLowerCase()) != -1
        || row.last_name.toLowerCase().indexOf($('search_graders').value.toLowerCase()) != -1);
      }
    },
    after_filter_only_by: function(current_filters, new_filter) {
      $('filter_link_graders_none').removeClassName('filter_selected');
      current_filters.each(function(filter_key) {
        if(filter_key != 'search') {
          $('filter_link_graders_' + filter_key).removeClassName('filter_selected');
        }
      });
      $('filter_link_graders_' + new_filter).addClassName('filter_selected');
    },
    after_clear_filters: function(current_filters) {
      current_filters.each(function(filter_key) {
        if(filter_key != 'search') {
          $('filter_link_graders_' + filter_key).removeClassName('filter_selected');
        }
      });
      $('filter_link_graders_none').  addClassName('filter_selected');
    },
    total_count_id: 'all_graders_count',
    filter_count_ids: {
      assigned: 'assigned_graders_count',
      unassigned: 'unassigned_graders_count'
    }
  });


  criteria_table = new FilterTable({
    table_id: $('criteria'),
    headers: {
      criterion_name: {display: "<%= I18n.t('criterion_name') %>", sortable: true},
      members: {display: "<%= I18n.t('graders.graders') %>", sortable: true, sort_with: 'nohtml'},
      coverage: {display: "<%= I18n.t('graders.coverage') %>", sortable: true}
    },
    can_select: true,
    can_select_all: true,
    select_all_header: "<%= I18n.t('all') %>",
    can_sort: true,
    row_prefix: "criteria_row_",
    select_name: "criteria[]",
    select_id_prefix: "criterion_select_",
    select_all_top_id: "criterion_select_all_top",
    select_all_bottom_id: "criterion_select_all_bottom",
    selectable_class: "FilterTable_criteria_selectable",
    select_onclick: "check_all(this.id.split('_')[2],this.checked)",
    footer: true,
    default_sort: 'criterion_name',
    default_filters: [],
    filters: {
      search: function(row) {
        return (row.criterion_name.toLowerCase().indexOf($('search_criteria').value.toLowerCase()) != -1
             || row.members.toLowerCase().indexOf($('search_criteria').value.toLowerCase()) != -1);
      }
    },
    after_filter_only_by: function(current_filters, new_filter) {
      $('filter_link_criteria_none').removeClassName('filter_selected');
      current_filters.each(function(filter_key) {
        if(filter_key != 'search') {
          $('filter_link_criteria_' + filter_key).removeClassName('filter_selected');
        }
      });
      $('filter_link_criteria_' + new_filter).addClassName('filter_selected');
    },
    after_clear_filters: function(current_filters) {
      current_filters.each(function(filter_key) {
        if(filter_key != 'search') {
          $('filter_link_criteria_' + filter_key).removeClassName('filter_selected');
        }
      });
      $('filter_link_criteria_none').  addClassName('filter_selected');
    },
    total_count_id: 'all_criteria_count',
    sorts: {
      nohtml: function(a, b) {
        return a[FILTERTABLE_SORT].stripTags().toLowerCase() > b[FILTERTABLE_SORT].stripTags().toLowerCase() ? 1 : -1;
        }
    }
  });

  new Ajax.Request('<%= populate_graders_assignment_graders_path(@assignment) %>', {
    asynchronous: true, 
    evalScripts: true, 
    onComplete: function(request){$('loading_graders_list').hide()},
    parameters: {
      'authenticity_token': AUTH_TOKEN
    }
  });

  new Ajax.Request('<%= populate_assignment_graders_path(@assignment) %>', {
    asynchronous: true, 
    evalScripts: true, 
    onComplete: function(request){$('loading_list').hide()},
    parameters: {
      'authenticity_token': AUTH_TOKEN
    }
  });

  <% if !@assignment.assign_graders_to_criteria %>
    $('criteria').hide();
    $('search_criteria').hide();
    $('search_criteria_label').hide();
  <% else %>
    new Ajax.Request('<%= populate_criteria_assignment_graders_path(@assignment) %>', {
      asynchronous: true, 
      evalScripts: true,
      onComplete: function(request){$('loading_list').hide()},
      parameters: {
        'authenticity_token': AUTH_TOKEN
      }
    });
  <% end %>
});

//]]>
</script>
