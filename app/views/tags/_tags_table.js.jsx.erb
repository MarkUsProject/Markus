<script type='text/jsx'>
  /** @jsx React.DOM */

  var TagsTable = React.createClass({
    getDefaultProps: function() {
      // Creates a new table with the columns defined below.
      // The first column will be the column initially sorted.

      return {
        columns: [
          {
            id: 'tags_name',
            content: '<%= t('activerecord.attributes.tags.name') %>',
            sortable: true
          },
          {
            id: 'creator_name',
            content: '<%= t('activerecord.attributes.tags.user') %>',
            sortable: true
          },
          {
            id: 'tags_description',
            content: '<%= t('activerecord.attributes.tags.description') %>',
            sortable: true
          },
          {
            id: 'tags_use',
            content: '<%= t('tags.use') %>',
          },
          {
            id: 'tags_actions',
            content: '<%= t(:actions) %>',
          }
        ],
      }
    },
    getInitialState: function() {
      return {
        tags: [],
        selected_tags: []
      };
    },
    updateSelectedTags: function(tags) {
      this.setState({selected_tags:tags});
    },
    componentWillMount: function() {
      this.refresh();
    },
    // Asks for new info from backend and sets props accordingly.
    refresh: function() {
      document.getElementById('working').style.display = '';

      $.ajax({
        method: 'GET',
        dataType: 'json',
        success: function(data) {
          this.setState({
            tags: data,
          });
        }.bind(this),
        complete: function() {
          document.getElementById('working').style.display = 'none';
        }
      });
    },
    render: function() {
      // Do tags specific operations here.
      var tags_data = this.state.tags.map(function(tag) {
        var t = {};

        t['id'] = tag.id;
        t['tags_name'] = tag.name;
        t['creator_name'] = tag.user_name;
        t['tags_description'] = tag.description;
        t['tags_use'] = I18n.t('tags.submissions_used', {count: tag.use});

        var action_links = [];
        action_links.push(tag.edit_link);
        action_links.push(tag.delete_link);
        t['tags_actions'] = <span onClick={this.props.refresh}
          dangerouslySetInnerHTML={{ __html: action_links.join(' | ') }}></span>;

        return t;
      }.bind(this));
      return (
        <div>
          <Table data={tags_data}
            selectable={false}
            onSelectedRowsChange={this.updateSelectedTags}
            columns={this.props.columns}
            filters={this.props.filters} />
        </div>
      );
    }
  });

  React.renderComponent(<TagsTable sections={<%= raw @sections.to_json %>} />, document.getElementById('tags_table'));
</script>
