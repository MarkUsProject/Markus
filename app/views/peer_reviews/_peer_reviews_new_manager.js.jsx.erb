<script type='text/jsx'>
  /** @jsx React.DOM */

  // A constant that represents all sections
  var ALL_SECTIONS = '';

  // The main manager that controls all the components.
  var PeerReviewsManager = React.createClass({
    getInitialState: function() {
      return {
        reviewerGroups: [],
        revieweeGroups: [],
        selectedReviewerGroups: [],
        selectedRevieweeGroups: [],
        selectedReviewerInRevieweeGroups: {},  // Dict of [reviewee][reviewer]
        revieweeToReviewers: {},
        reviewerToNumReviews: {},
        groupIdToName: {}
      };
    },

    componentWillMount: function() {
      this.refresh();
    },

    updateSelectedReviewerGroups: function(reviewerGroups) {
      this.setState({selectedReviewerGroups: reviewerGroups});
    },

    clearReviewerToRevieweeCheckboxData: function() {
      this.setState({selectedReviewerInRevieweeGroups: {}});
    },

    updateSelectedRevieweeGroups: function(revieweeGroups) {
      this.setState({selectedRevieweeGroups: revieweeGroups});
    },

    updatedSelectedReviewersInRevieweesTable: function(reviewerGroupId, revieweeGroupId, isChecked) {
      // If the reviewee is not in the dictionary, add a dictionary for the reviewee id.
      if (!(revieweeGroupId in this.state.selectedReviewerInRevieweeGroups)) {
        this.state.selectedReviewerInRevieweeGroups[revieweeGroupId] = {};
      }

      // Now add or remove the reviewee to the inner dictionary based on `isChecked`.
      if (isChecked) {
        // If the reviewer isn't in the reviewe's dictionary, put it in with a temp placeholder.
        if (!(reviewerGroupId in this.state.selectedReviewerInRevieweeGroups[revieweeGroupId])) {
          this.state.selectedReviewerInRevieweeGroups[revieweeGroupId][reviewerGroupId] = true;
        }
      } else {
        // Since we're removing by unchecking, if the key exists from the inner dictionary, delete it.
        if (reviewerGroupId in this.state.selectedReviewerInRevieweeGroups[revieweeGroupId]) {
          delete this.state.selectedReviewerInRevieweeGroups[revieweeGroupId][reviewerGroupId];
        }
      }

      // While this is technically pointless, some kind of command is needed
      // to get react to re-issue a re-rendering of its components.
      this.setState({selectedReviewerInRevieweeGroups: this.state.selectedReviewerInRevieweeGroups});
    },

    clearSelectedFields: function() {
      this.setState({
        selectedReviewerGroups: [],
        selectedRevieweeGroups: [],
        selectedReviewerInRevieweeGroups: {}
      });
    },

    // Asks for new info from backend and sets state accordingly.
    refresh: function() {
      // Since these will not be present at the beginning, we only want to invoke them when
      //  React populates the refs with the values.
      if (this.refs.hasOwnProperty('reviewerTable')) {
        this.refs.reviewerTable.clearCheckboxes();
      }
      if (this.refs.hasOwnProperty('revieweeTable')) {
        this.refs.revieweeTable.clearCheckboxes();
      }

      document.getElementById('working').style.display = '';

      jQuery.ajax({
        url: '<%= populate_assignment_peer_reviews_path %>',
        method: 'GET',
        dataType: 'json',
        success: function(data) {
          document.getElementById('working').style.display = 'none';
          this.clearSelectedFields();
          this.setState({
            reviewerGroups: data[0],
            revieweeGroups: data[1],
            revieweeToReviewers: data[2],
            groupIdToName: data[3],
            reviewerToNumReviews: data[4]
          });
        }.bind(this)
      });
    },

    render: function() {
      return (
        <div>
          <div className="peer-review-amount-spinner">
            <%= j raw t('peer_review.number_per_group') %>: <input type="number"
                   id="peer-review-spinner" min="<%= Assignment::MIN_PEER_REVIEWS_PER_GROUP %>" />
          </div>
          <div className='columns'>
            <ReviewerTable ref="reviewerTable"
              groups={this.state.reviewerGroups}
              reviewerToNumReviews={this.state.reviewerToNumReviews}
              onSelectedGroupsChange={this.updateSelectedReviewerGroups}
              refresh={this.refresh} />
            <ActionsColumn refresh={this.refresh}
              selectedReviewerGroups={this.state.selectedReviewerGroups}
              selectedRevieweeGroups={this.state.selectedRevieweeGroups}
              selectedReviewerInRevieweeGroups={this.state.selectedReviewerInRevieweeGroups}
              clearSelectedFields={this.clearSelectedFields} />
            <RevieweeTable ref="revieweeTable"
              groups={this.state.revieweeGroups}
              revieweeToReviewersMap={this.state.revieweeToReviewers}
              groupIdToName={this.state.groupIdToName}
              onReviewerChangeInRevieweeTable={this.updatedSelectedReviewersInRevieweesTable}
              selectedReviewerInRevieweeGroups={this.state.selectedReviewerInRevieweeGroups}
              onSelectedGroupsChange={this.updateSelectedRevieweeGroups}
              clearReviewerToRevieweeCheckboxData={this.clearReviewerToRevieweeCheckboxData}
              refresh={this.refresh} />
          </div>
        </div>
      );
    }
  });

  // Renders the dropdown menu for sections.
  var SectionSelectionMenu = React.createClass({
    render: function() {
      // Note: Apparently render has to return something, so the 'if' has to go
      // inside (otherwise errors happen).
      return (
        <span>
        <% if Section.any? %>
          <%= j raw t('browse_submissions.section') %>:
          <select id={this.props.selectId} className="white" onChange={this.props.changeSection}>
            <option value=""><%= j raw t('browse_submissions.sections.all') %></option>
            <% Section.all.order(:name).each do |section| %>
              <option value="<%= j raw section.name %>"><%= j raw section.name %></option>
            <% end %>
          </select>
        <% end %>
        </span>
      );
    }
  });
  
  // The table of groups to be graders on the left.
  var ReviewerTable = React.createClass({
    getInitialState: function() {
      return { sectionName: ALL_SECTIONS };
    },

    getDefaultProps: function() {
      return {
        columns: [
          {
            id: 'name',
            content: '<%= j raw t('peer_review.reviewer_group') %>',
            sortable: true,
            searchable: true
          },
          {
            id: 'groups',
            content: '<%= j raw t('peer_review.number_of_reviews_header') %>',
            sortable: false,
            searchable: false
          },
        ]
      };
    },

    clearCheckboxes: function() {
      this.refs.table.clearCheckboxes();
    },

    changeSection: function(event) {
      this.clearCheckboxes();
      this.setState({ sectionName: event.target.value });
      this.props.refresh();
    },

    render: function() {
      var filters = [
        {
          name: 'all',
          text: '<%= j raw t('groups.all_grouping_counts') %>',
          func: function(group) {
            if (this.state.sectionName === ALL_SECTIONS) {
              return true;
            }
            return this.state.sectionName == group.section;
          }.bind(this)
        },
      ];

      var hashmap = this.props.reviewerToNumReviews;
      var groups_data = this.props.groups.map(function(group) {
        var numReviews = 0;
        if (hashmap.hasOwnProperty(group.id)) {
          numReviews = hashmap[group.id];
        }
        return {
          id: group.id,
          name: group.name,
          groups: numReviews,
          section: group.section
        };
      }.bind(this));

      return (
        <div className={'col-left'}>
          <div className={'tab-pane ui-tabs ui-widget ui-widget-content ui-corner-all'} id='groups-tabs'>
            <SectionSelectionMenu
              changeSection={this.changeSection}
              selectId={"peer-review-reviewer-section"} />
            <Table ref="table"
              data={groups_data}
              columns={this.props.columns}
              filters={filters}
              selectable={true}
              onSelectedRowsChange={this.props.onSelectedGroupsChange}
              search_placeholder={'<%= j raw t('groups.search_groups') %>'} />
          </div>
        </div>
      );
    }
  });

  // The table of peer reviewees and assigned reviewers on the right.
  var RevieweeTable = React.createClass({
    getInitialState: function() {
      return { sectionName: ALL_SECTIONS };
    },

    getDefaultProps: function() {
      return {
        columns: [
          {
            id: 'name',
            content: '<%= j raw t('peer_review.reviewee_group') %>',
            sortable: true,
            searchable: true
          },
          {
             id: 'members',
             content: '<%= j raw t('peer_review.assigned_reviewers_header') %>',
             sortable: false,
             searchable: false
          },
          {
            id: 'count',
            content: '<%= j raw t('peer_review.number_assigned_reviewers') %>',
            sortable: true,
            searchable: false
          },
        ],
      };
    },

    clearCheckboxes: function() {
      this.refs.table.clearCheckboxes();
      this.props.clearReviewerToRevieweeCheckboxData();
    },

    changeSection: function(event) {
      this.clearCheckboxes();
      this.setState({ sectionName: event.target.value });
    },

    reviewerInRevieweeChange: function(event) {
      var isChecked = event.currentTarget.checked;
      var id = parseInt(event.currentTarget.getAttribute('id'), 10);
      var reviewerGroupId = parseInt(event.currentTarget.getAttribute('data-reviewer-group-id'), 10);
      var revieweeGroupId = parseInt(event.currentTarget.getAttribute('data-reviewee-group-id'), 10);
      this.props.onReviewerChangeInRevieweeTable(reviewerGroupId, revieweeGroupId, isChecked);
    },

    // Required because of JavaScript's variable hoisting.
    checkboxShouldBeChecked: function(reviewee_group_id, reviewer_group_id) {
      var returnVal = false;
      if (reviewee_group_id in this.props.selectedReviewerInRevieweeGroups) {
        returnVal = reviewer_group_id in this.props.selectedReviewerInRevieweeGroups[reviewee_group_id];
      }
      return returnVal;
    },

    render: function() {
      var filters = [
        {
          name: 'all',
          text: '<%= j raw t('groups.all_grouping_counts') %>',
          func: function(group) {
            if (this.state.sectionName == ALL_SECTIONS) {
              return true;
            }
            return this.state.sectionName == group.section;
          }.bind(this)
        },
      ];

      var groups_data = this.props.groups.map(function(group) {
        var reviewerGroups = [];
        var reviewee_group_id = group.id;
        var reviewer_ids = this.props.revieweeToReviewersMap[reviewee_group_id];
        reviewer_ids.forEach(function(reviewer_group_id) {
          var reviewer_group_name = this.props.groupIdToName[reviewer_group_id];
          reviewerGroups.push(<div key={reviewer_group_id}>
            <input id={reviewer_group_id}
              type='checkbox'
              data-reviewer-group-id={reviewer_group_id}
              data-reviewee-group-id={reviewee_group_id}
              checked={this.checkboxShouldBeChecked(reviewee_group_id, reviewer_group_id)}
              onChange={this.reviewerInRevieweeChange} /> {reviewer_group_name}</div>);
        }.bind(this));

        return {
          id: group.id,
          name: group.name,
          members: reviewerGroups,
          section: group.section,
          count: reviewer_ids.length
        };
      }.bind(this));

      return (
        <div className={'col-right'}>
          <div className={'tab-pane ui-tabs ui-widget ui-widget-content ui-corner-all'} id='groups-tabs'>
            <SectionSelectionMenu
              changeSection={this.changeSection}
              selectId="peer-review-reviewee-section" />
            <Table ref="table"
              data={groups_data}
              columns={this.props.columns}
              filters={filters}
              selectable={true}
              onSelectedRowsChange={this.props.onSelectedGroupsChange}
              search_placeholder={'<%= j raw t('groups.search_groups') %>'} />
          </div>
        </div>
      );
    }
  });

  var ActionsColumn = React.createClass({
    performButtonAction: function(event) {
      var numGroupsToAssignVal = jQuery('#peer-review-spinner').val();

      var dataToSend = {
        actionString: event.currentTarget.getAttribute('id'),
        selectedReviewerGroupIds: this.props.selectedReviewerGroups,
        selectedRevieweeGroupIds: this.props.selectedRevieweeGroups,
        selectedReviewerInRevieweeGroups: this.props.selectedReviewerInRevieweeGroups,
        numGroupsToAssign: numGroupsToAssignVal
      };

      if ((numGroupsToAssignVal == null || numGroupsToAssignVal == '') && dataToSend.actionString == 'random_assign') {
        // TODO: Display this like any other flash message, and internationalize the message.
        // this.props.setErrorMessage('Did not set the number of peer reviews (spinner is blank).');
        alert('Did not set the number of peer reviews (spinner is blank).');
        return;
      }

      document.getElementById('working').style.display = '';

      jQuery.ajax({
        method: 'POST',
        url: '<%= assign_groups_assignment_peer_reviews_path %>',
        data: dataToSend,

        success: function(data) {
          document.getElementById('working').style.display = 'none';
          this.props.clearSelectedFields();
          this.props.refresh();
        }.bind(this),
      });
    },

    render: function() {
      return (
        <div className={'col-center'}>
          <div id='icons'>
            <input id='random_assign'
              className='image_input'
              src='<%= image_path 'random_arrow.png' %>'
              alt='<%= j raw t('groups.randomly_assign_graders') %>'
              onClick={this.performButtonAction}
              type='image'
            />
            <input id='assign'
              className='image_input'
              src='<%= image_path('add_arrow.png') %>'
              alt='<%= j raw t('add_members') %>'
              onClick={this.performButtonAction}
              type='image'
            />
            <input id='unassign'
              className='image_input'
              src='<%= image_path('remove_arrow.png') %>'
              alt='<%= j raw t('remove_members') %>'
              onClick={this.performButtonAction}
              type='image'
            />
          </div>
        </div>
      );
    }
  });

  React.renderComponent(<PeerReviewsManager/>, document.getElementById('peer_reviews_manager'));
</script>
