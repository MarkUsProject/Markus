<% content_for :head do %>
  <%= stylesheet_link_tag 'jquery-ui', 'jquery-ui-timepicker-addon' %>
  <%= javascript_include_tag 'create_assignment',
                             'jquery-ui-timepicker-addon',
                             'PeriodDeltaChain/PeriodDeltaChain',
                             'localize_date' %>
  <%= render partial: 'boot', formats: [:js], handlers: [:erb] %>
  <%= render partial: 'shared/navigation_warning',
             formats: [:js],
             handlers: [:erb] %>
<% end %>

<%= render 'shared/flash_message' %>
<%= render partial: 'shared/error_explanation',
           locals: { model: @assignment } %>

<%= form_for @assignment do |f| %>

  <input type="hidden" name="assignment[scanned_exam]" value="<%= @assignment.scanned_exam %>">

  <label class='required'><%= t('assignment.required_fields') %></label>

  <%# Assignment properties %>
  <fieldset>
    <legend>
      <span><%= t('assignment.properties') %></span>
    </legend>

    <div class='help assignment_properties_help'>
      <p class='help-message-box assignment_properties_help'>
        <%= t('assignment.help.assignment_form.properties').html_safe %>
      </p>
    </div>

    <div>
      <%= f.label :short_identifier,
                  t('assignment.short_identifier'),
                  class: 'required' %>
      <%= f.text_field :short_identifier,
                       onchange: 'set_onbeforeunload(true);',
                       size: 35,
                       maxlength: 30,
                       required: true %>
    </div>

    <div>

      <%= f.label :repository_folder,
                  t(:repository_folder),
                  class: 'required' %>
      <%= f.text_field :repository_folder,
                       onchange: 'set_onbeforeunload(true);',
                       size: 35,
                       required: true,
                       readonly: true %>
    </div>

    <div>
      <%= f.label :description,
                  t('assignment.name'),
                  class: 'required' %>
      <%= f.text_field :description,
                       onchange: 'set_onbeforeunload(true);',
                       size: 35,
                       required: true %>
    </div>

    <div>
      <%= f.label :message %>
      <%= f.text_area :message,
                      cols: 65,
                      rows: 8,
                      onchange: 'set_onbeforeunload(true);' %>
    </div>

    <% unless @sections.empty? %>
      <div class='information'>
        <%= t('assignment.section_due_date_option') %>
      </div>

      <div>
        <%= f.label :section_due_dates_type, t('assignment.section_due_dates_type') %>
        <%= f.check_box :section_due_dates_type,
                        onclick: 'set_onbeforeunload(true);' %>
      </div>

      <div id='section_due_dates_information'
           style='<%= 'display: none' unless @assignment.section_due_dates_type %>'>
        <p class='information'>
          <%= t('assignment.section_due_dates_info').html_safe %>
        </p>
        <div class='section_due_date_form'>
          <%= f.fields_for :section_due_dates,
                           @section_due_dates do |due_date_f| %>
            <% obj = due_date_f.object %>
            <p>
              <%= due_date_f.label :section, Section.model_name.human %>
              <%= obj.section.name %>
              <%= due_date_f.text_field :section_id, class: 'hidden' %>
              <%= due_date_f.label :due_date, t(:due_date),
                                   class: 'section_due_date_label' %>
              <%= due_date_f.text_field :due_date,
                                        class: 'section_due_date_input',
                                        value: obj.due_date.nil? ? '' :
                                               obj.due_date.strftime(
                                                 '%Y-%m-%d %l:%M %p') %>
            </p>
          <% end %>
        </div>
      </div>
    <% end %>

    <div>
      <%= f.label :due_date,
                  t('assignment.due_date'),
                  class: 'required' %>
      <%= f.text_field :due_date,
                       onchange: 'set_onbeforeunload(true);',
                       value: @assignment.due_date.nil? ? '' :
                              @assignment.due_date.strftime(
                                '%Y-%m-%d %l:%M %p'),
                       size: 35,
                       required: true,
                       placeholder: t('time.format_string.placeholder') %>
    </div>

    <% if !@assignment.scanned_exam %>
    <div>
      <%= f.check_box :allow_web_submits,
                      onclick: 'set_onbeforeunload(true);' %>
      <%= f.label :allow_web_submits,
                  t('assignment.allow_web_submits') %>
    </div>

    <div>
      <%= f.check_box :vcs_submit,
                      onclick: 'set_onbeforeunload(true);' %>
      <%= f.label :vcs_submit,
                  t('assignment.vcs_submit') %>
    </div>
    <% end %>

    <div>
      <%= f.check_box :display_median_to_students,
                      onclick: 'set_onbeforeunload(true);' %>
      <%= f.label :display_median_to_students,
                  t('assignment.display_median_to_students') %>
    </div>

    <div>
      <%= f.check_box :display_grader_names_to_students,
                      onclick: 'set_onbeforeunload(true);' %>
      <%= f.label :display_grader_names_to_students,
                  t('assignment.display_grader_names_to_students') %>
    </div>

    <div>
      <%= f.check_box :is_hidden,
                      onclick: 'set_onbeforeunload(true);' %>
      <%= f.label :is_hidden, t('assignment.is_hidden') %>
    </div>
    <div>
      <%= f.check_box :has_peer_review,
                      onclick: 'set_onbeforeunload(true);' %>
      <%= f.label :has_peer_review,
                  t('assignment.has_peer_review') %>
    </div>
  </fieldset>

  <% if !@assignment.scanned_exam %>
  <%# Required files %>
  <fieldset>
    <legend>
      <span><%= t('assignment.required_files') %></span>
    </legend>

    <div class='help assignment_required_files_help'>
      <p class='help-message-box assignment_required_files_help'>
        <%= t('assignment.help.assignment_form.required_files') %>
      </p>
    </div>

    <h4><%= t('assignment.required_files_by_student') %></h4>
    <div id='assignment_files'>
      <%= f.fields_for :assignment_files do |assignment_file_form| %>
        <%= render partial: 'assignment_file',
                   locals: { assignment_file: assignment_file_form.object,
                             form: f } %>
      <% end %>
    </div>
    <p id='assignment_file_add_link'>
      <%= link_to t('assignment.add_required_file'),
                  '#',
                  onclick: 'add_assignment_file(); return false;' %>
    </p>
    <p id='only_required_files_option'
       <% if @assignment.assignment_files.empty? %>
         class='disable'
       <% end %>>
      <%= f.check_box :only_required_files,
                      onclick: 'set_onbeforeunload(true);' %>
      <%= f.label :only_required_files, t('required_file_warning') %>
    </p>
  </fieldset>

  <%# Group properties %>
  <fieldset>
    <legend>
      <span><%= t('assignment.group.properties') %></span>
    </legend>

    <div class='help assignment_assignment_type_help'>
      <p class='help-message-box assignment_assignment_type_help'>
        <%= t('assignment.help.assignment_form.assignment_type').html_safe %>
      </p>
    </div>

    <% if @assignment.new_record? && @clone_assignments.size > 0 %>
      <p id='persist_groups_assignment_style'>
        <%= check_box_tag :persist_groups, onclick: 'set_onbeforeunload(true);' %>
        <%= label_tag :persist_groups, t('assignment.group.persist_group_from') %>
        <%= select_tag :persist_groups_assignment,
                       options_for_select(@clone_assignments.map { |a| [a.short_identifier, a.id] }),
                       disabled: true %>
      </p>
    <% end %>
    <p id='is_group_assignment_style'>
      <%= check_box_tag :is_group_assignment, true,
                        @assignment.student_form_groups ||
                        @assignment.invalid_override,
                        onchange: 'set_onbeforeunload(true);' %>
      <%= label_tag :is_group_assignment,
                    t('assignment.group.work_in_groups') %>
    </p>
    <fieldset class='group_properties'>
      <legend>
        <span><%= t('assignment.group.properties') %></span>
      </legend>

      <div id='group_properties'>
        <p id='student_form_groups_style'>
          <%= f.check_box :student_form_groups,
                          onchange: 'set_onbeforeunload(true);' %>
          <%= f.label :student_form_groups,
                      t('assignment.group.students_allowed_form_groups') %>
        </p>

        <p id='group_limit_style'>
          <%= f.label :group_min,
                      t('assignment.group.limit_min') %>
          <%= f.number_field :group_min,
                             min: 1,
                             max: 999,
                             onchange: 'set_onbeforeunload(true);' %>
          <%= f.label :group_max,
                      t('assignment.group.limit_max') %>
          <%= f.number_field :group_max,
                             min: 1,
                             max: 999,
                             onchange: 'set_onbeforeunload(true);' %>
        </p>

        <p id='group_name_autogenerated_style'>
          <%= f.check_box :group_name_autogenerated %>
          <%= f.label :group_name_autogenerated,
                      t('assignment.group.name_autogenerated'),
                      onchange: 'set_onbeforeunload(true);' %>

        </p>
      </div>
    </fieldset>
  </fieldset>

  <%# Submission rules %>
  <fieldset id='submission_rule_fields'>
    <legend>
      <span><%= SubmissionRule.model_name.human %></span>
    </legend>

    <div class='help assignment_submission_rules_help'>
      <p class='help-message-box assignment_submission_rules_help'>
        <%= t('assignment.help.assignment_form.submission_rules') %>
      </p>
    </div>

    <%= f.fields_for :submission_rule do |rule| %>
      <%= rule.radio_button :type,
                            'NoLateSubmissionRule',
                            checked: true,
                            id: 'no_late_submission_rule' %>
      <%= label_tag 'no_late_submission_rule',
                    NoLateSubmissionRule.human_attribute_name(:form_description) %>
      <br>
      <%= rule.radio_button :type,
                            'GracePeriodSubmissionRule',
                            id: 'grace_period_submission_rule' %>
      <%= label_tag 'grace_period_submission_rule',
                    GracePeriodSubmissionRule.human_attribute_name(:form_description) %>
      <div id='grace_periods'>
        <table id='grace_periods_table'>
          <thead>
          <tr>
            <th><%= t('submission_rules.after').capitalize %></th>
            <th><%= t('submission_rules.from').capitalize %></th>
            <th><%= t('submission_rules.to').capitalize %></th>
            <th><%= t(:remove) %></th>
          </tr>
          </thead>
          <tbody>
            <% if rule.object.type.to_s == 'GracePeriodSubmissionRule' && !rule.object.periods.empty? %>
                <%= rule.fields_for :periods do |period_form| %>
                    <%
                      # The below conditional is meant to filter out periods that do not match
                      # the currently selected submission rule. This only happens when we fail to
                      # save a new submission rule.
                      if rule.object.type.to_s == rule.object.class.to_s || period_form.object.id.nil? %>
                        <%= render partial: 'grace_period',
                                   locals: { grace_period: period_form.object,
                                             pf: rule } %>
                    <% end %>
                <% end %>
            <% else %>
                <%= render partial: 'grace_period',
                           locals: { pf: rule, grace_period: Period.new } %>
            <% end %>
          </tbody>
        </table>
        <%= link_to t('submission_rules.add_period'),
                    '#',
                    onclick: 'add_period("grace_periods", grace_periods);' +
                        'return false;' %>
      </div>

      <br>
      <%= rule.radio_button :type,
                            'PenaltyDecayPeriodSubmissionRule',
                            id: 'penalty_decay_period_submission_rule' %>
      <%= label_tag 'penalty_decay_period_submission_rule',
                    PenaltyDecayPeriodSubmissionRule.human_attribute_name(:form_description) %>
      <br>
      <div id='penalty_decay_periods'>
        <table id='penalty_decay_periods_table'>
          <thead>
          <tr>
            <th><%= t('submission_rules.deduct').capitalize %></th>
            <th><%= t('submission_rules.every').capitalize %></th>
            <th><%= t('submission_rules.for').capitalize %></th>
            <th><%= t('submission_rules.from').capitalize %></th>
            <th><%= t('submission_rules.to').capitalize %></th>
            <th><%= t(:remove) %></th>
          </tr>
          </thead>
          <tbody>
            <% if rule.object.type.to_s == 'PenaltyDecayPeriodSubmissionRule' %>
                <%= rule.fields_for :periods do |period_form| %>
                    <%
                      # The below conditional is meant to filter out periods that do not match
                      # the currently selected submission rule. This only happens when we fail to
                      # save a new submission rule.
                      if rule.object.type.to_s == rule.object.class.to_s || period_form.object.id.nil? %>
                        <%= render partial: 'penalty_decay_period',
                                   locals: { penalty_decay_period: period_form.object,
                                             pf: rule } %>
                    <% end %>
                <% end %>
            <% else %>
                <%= render partial: 'penalty_decay_period',
                           locals: { pf: rule, penalty_decay_period: Period.new } %>
            <% end %>
          </tbody>
        </table>
        <%= link_to t('submission_rules.add_period'),
                    '#',
                    onclick: 'add_period("penalty_decay_periods", ' +
                             'penalty_decay_periods); return false;' %>
      </div>

      <%= rule.radio_button :type,
                            'PenaltyPeriodSubmissionRule',
                            id: 'penalty_period_submission_rule' %>
      <%= label_tag 'penalty_period_submission_rule',
                    PenaltyPeriodSubmissionRule.human_attribute_name(:form_description) %>
      <div id='penalty_periods'>
        <table id='penalty_periods_table'>
          <thead>
          <tr>
            <th><%= t('submission_rules.after').capitalize %></th>
            <th><%= t('submission_rules.deduct').capitalize %></th>
            <th><%= t('submission_rules.from').capitalize %></th>
            <th><%= t('submission_rules.to').capitalize %></th>
            <th><%= t(:remove) %></th>
          </tr>
          </thead>
          <tbody>
            <% if rule.object.type.to_s == 'PenaltyPeriodSubmissionRule' %>
                <%= rule.fields_for :periods do |period_form| %>
                    <%
                      # The below conditional is meant to filter out periods that do not match
                      # the currently selected submission rule. This only happens when we fail to
                      # save a new submission rule.
                      if rule.object.type.to_s == rule.object.class.to_s || period_form.object.id.nil? %>
                        <%= render partial: 'penalty_period',
                                   locals: { penalty_period: period_form.object,
                                             pf: rule } %>
                    <% end %>
                <% end %>
            <% else %>
                <%= render partial: 'penalty_period',
                           locals: { pf: rule, penalty_period: Period.new } %>
            <% end %>
          </tbody>
        </table>
        <%= link_to t('submission_rules.add_period'),
                    '#',
                    onclick: 'add_period("penalty_periods",penalty_periods);' +
                        ' return false;' %>
      </div>
    <% end %>
  </fieldset>
  <% end %>

  <%# Remark request rules %>
  <fieldset>
    <legend>
      <span><%= t('assignment.remark.rules')%></span>
    </legend>

    <div class='help assignment_remark_request_rules_help'>
      <p class='help-message-box assignment_remark_request_rules_help'>
        <%= t('assignment.help.assignment_form.remark_request_rules') %>
      </p>
    </div>

    <p id='allow_remark_requests'>
      <%= f.check_box :allow_remarks,
                      onchange: 'set_onbeforeunload(true);' %>
      <%= f.label :allow_remarks, t('assignment.remark.allow') %>
    </p>

    <div id='remark_properties'>
      <p>
        <%= f.label :remark_due_date, t('assignment.remark.due_date') %>
        <%= f.text_field :remark_due_date,
                         onchange: 'set_onbeforeunload(true);',
                         value: @assignment.remark_due_date.nil? ? '' :
                                @assignment.remark_due_date.strftime(
                                  '%Y-%m-%d %l:%M %p'),
                         size: 35 %>
      </p>
      <p>
        <%= f.label :remark_message, t('assignment.remark.message') %>
        <%= f.text_area :remark_message,
                        rows: 8,
                        cols: 65,
                        onchange: 'set_onbeforeunload(true);' %>
      </p>
    </div>
  </fieldset>

  <%= f.submit t(:submit),
               data: { disable_with: t('working') },
               onclick: 'set_onbeforeunload(false);' %>
<% end %>

<%# Starter Code %>
<% if MarkusConfigurator.markus_starter_code_on && @assignment.id %>
  <fieldset>
    <legend>
      <span><%= t('upload_the', item: t('assignment.starter_code')) %></span>
    </legend>
    <%= render 'file_manager' %>
  </fieldset>
<% end %>
