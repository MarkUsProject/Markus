<script type='text/jsx'>
  /** @jsx React.DOM */

  var PeerSubmissionsTable = React.createClass({
    getDefaultProps: function() {
      // Defines the columns used for the table and whether they
      // are sortable searchable. The default initially sorted
      // column is the first sortable column in the array.
      return {
        columns: [
          {
            id: 'group_name',
            content: '<%= j raw t('browse_submissions.group_name') %>',
            sortable: true,
            compare: compare_anchor_text
          },
          {
            id: 'review_state',
            content: '<%= j raw t('browse_submissions.review_state') %>',
            sortable: true
          },
        ]
      };
    },
    getInitialState: function() {
      return {
        submissions: [],
      };
    },
    componentWillMount: function() {
      this.refresh();
    },
    // Asks for new info from backend and sets props accordingly.
    refresh: function() {
      // Show working indicator.
      document.getElementById('working').style.display = '';
      jQuery.ajax('<%= populate_peer_submissions_table_assignment_submissions_path(assignment_id) %>',
                  { method: 'GET',
                    dataType: 'json',
                    success: function(data) {
                      this.setState({
                        submissions: data,
                      });
                    }.bind(this),
                    // Close working indicator.
                    complete: function() {
                      document.getElementById('working').style.display = 'none';
                    }
                  });
    },
    renderMarkingState: function(state) {
      if (state === 'released') {
        return (<%= image_tag('icons/email_go.png',
                              alt: t('marking_state.released'),
                              title: t('marking_state.released')) %>);
      } else if (state === 'unmarked') {
        return (<%= image_tag('icons/shape_square.png',
                              alt: t('marking_state.not_collected'),
                              title: t('marking_state.not_collected')) %>);
      } else if (state === 'partial') {
        return (<%= image_tag('icons/pencil.png',
                              alt: t('marking_state.in_progress'),
                              title: t('marking_state.in_progress')) %>);
      } else if (state === 'completed') {
        return (<%= image_tag('icons/accept.png',
                              alt: t('marking_state.completed'),
                              title: t('marking_state.completed')) %>);
      } else if (state === 'remark') {
        return (<%= image_tag('icons/double_exclamation.png',
                              alt: t('marking_state.remark_requested'),
                              title: t('marking_state.remark_requested')) %>);
      } else {
        return 'Invalid marking state';
      }
    },

    render: function() {
      var submissions_data = this.state.submissions.map(function(submission) {
        var s = {};
        if (submission.name_url === '') {
          s['group_name'] = <span><%= j raw t('assignment.review') %> {submission.anonymous_id}</span>;
        } else {
          s['group_name'] = <a href={submission.name_url}> <%= j raw t('assignment.review') %> {submission.anonymous_id}</a>;
        }
        if (submission.error !== '') {
          s['class_name'] = "submission_error";
        } else {
          s['class_name'] = submission.class_name;
          s['review_state'] = this.renderMarkingState(submission.state);
        }
        return s;
      }.bind(this));

        return (
          <div>
            {/* This table and its attributes are defined in table.js */}
            <Table data={submissions_data}
              columns={this.props.columns}
              footer={false}
              search={false}
            />
          </div>
        );
    }
  });

  React.renderComponent(<PeerSubmissionsTable />, document.getElementById('peer_submissions_table'));
</script>
