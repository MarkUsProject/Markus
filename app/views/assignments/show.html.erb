<% content_for :head do %>
<script>
  var invite_modal = null;

  function invite() {
    invite_modal.open();
    document.getElementById('invite_member').value = '';
    document.getElementById('invite_member').focus();
  }

  $(document).ready(function() {
    invite_modal = new ModalMarkus('#invite_dialog');
  });
</script>
<% end %>

<% content_for :title, "#{Assignment.model_name.human} #{@assignment.short_identifier}" %>

<div class='pane-wrapper'>
  <div class='pane block'>
    <div>
      <%= render partial: 'read', locals:{ peer_review: false } %>
    </div>
  </div>

  <div class='pane block'>
    <h2><%= t('groups.student_interface.group_information') %></h2>

    <div class='block-content'>
      <% # If student has no group, inform them
         if @grouping.nil? %>
        <p class='notice'>
          <%= t('groups.student_interface.no_group_yet') %>
          <% if !@assignment.scanned_exam && @assignment.past_collection_date?(@current_user.section) %>
            <%= t('assignments.due_date.final_due_date_passed') %>
          <% end %>
        </p>

        <% # Test if the student can form groupings or not
           unless @assignment.student_form_groups %>
          <p>
            <%= t('groups.student_interface.not_allowed_to_form_group') %>
          </p>
        <% end %>

        <% # See if the student has been invited to some group
           if @current_user.has_pending_groupings_for?(@assignment.id) %>
          <h3><%= t('groups.members.invitations') %></h3>

          <% @current_user.pending_groupings_for(@assignment.id).each do |grouping|%>
            <div>
              <p><%= t('groups.members.invited_by',
                       inviter_last_name: grouping.inviter.last_name,
                       inviter_first_name: grouping.inviter.first_name) %>
              </p>
              <ul>
                <% grouping.student_memberships.includes(:user).each do |member|%>
                  <%= render partial: 'assignments/member',
                             locals: { member: member,
                                       grouping: grouping } %>
                <% end -%>
              </ul>
              <% if !@assignment.scanned_exam && @assignment.past_collection_date?(@current_user.section) %>
                <p class='information'>
                  <%= t('groups.student_interface.may_not_join') %>
                </p>
              <% else %>
                <%= link_to t('groups.members.join'),
                            accept_invitation_assignment_groups_path(assignment_id: @assignment.id, grouping_id: grouping.id),
                            { method: :patch, class: 'button' } %>
                <%= link_to t('groups.members.decline'),
                            decline_invitation_assignment_groups_path(assignment_id: @assignment.id, grouping_id: grouping.id),
                            { class: 'button',
                              method: :patch, data: { confirm: t('groups.members.decline_invitation_confirm') } } %>
              <% end %>
            </div>
          <% end %>
        <% end %>

        <% # If students are allowed to form groups and
           # the grace period for this assignment has not yet passed,
           # render UI elements for group creation
           if !@assignment.past_collection_date?(@current_user.section) && @assignment.student_form_groups %>

          <h3><%= t('groups.student_interface.form_group') %></h3>

          <% if @current_user.has_pending_groupings_for?(@assignment.id) %>
            <% confirm = t('groups.student_interface.confirm_create_group') %>
          <% else %>
            <% confirm = nil %>
          <% end %>
          <% if @assignment.group_min == 1 %>
            <p>
              <%= link_to t('groups.student_interface.work_alone'),
                          assignment_groups_path(assignment_id: @assignment.id, workalone: 'true'),
                          { class: 'button', method: :post,
                            data: { confirm: confirm, disable_with: t(:please_wait) } } %>
            </p>
          <% end %>
          <p>
            <%= link_to t('helpers.submit.create', model: Group.model_name.human),
                        assignment_groups_path(@assignment.id),
                        { class: 'button', method: :post,
                          data: { confirm: confirm,
                                  disable_with: t(:please_wait) } } %>
          </p>
        <% end %>
      <% else %>
        <%# Since the student has a group already, we display information about the group only %>
        <%# Check if groupname should be displayed %>
        <h3>
          <% if @assignment.group_name_displayed %>
            <%= @grouping.group.group_name %>
          <% else %>
            <%= t('groups.student_interface.your_group') %>
          <% end %>
        </h3>
        <% # Display group properties are read only warning
           # when the due date and grace period (if any) have passed.
           if @assignment.past_collection_date?(@current_user.section) && @assignment.student_form_groups &&
             !@assignment.invalid_override && @assignment.group_max > 1 %>
          <p class='information'>
            <%= t('groups.student_interface.modification_limited') %>
          </p>
        <% end %>

        <% # If the group does not have the right amount of members yet, display
           # 'group is not valid' warning.
           unless @grouping.is_valid? %>
          <p class='warning'>
            <%= t('groups.student_interface.invite_more_students') %>
          </p>
        <% end %>

        <%# For each member of this group, display name and status %>
        <ul>
          <% @grouping.student_memberships.includes(:user).each do |member|%>
            <%= render partial: 'assignments/member',
                       locals: { member: member,
                                 grouping: @grouping } %>
          <% end %>
        </ul>

        <% # Display the URL of this group's repository if applicable
           if @assignment.vcs_submit && (!@assignment.is_timed || !@grouping.start_time.nil?) %>
          <h3><%= t('groups.student_interface.url_group_repository') %></h3>
          <div class='sub_block'>
            HTTPS: <a href='#'><%= @grouping.group.repository_external_access_url %></a>
            <% if allowed_to?(:git_enabled?, KeyPair) %>
              <br/>
              SSH: <a href='#'><%= @grouping.group.repository_ssh_access_url %></a>
            <% end %>
          </div>
        <% end %>
      <% end %>

      <% unless @grouping.nil? %>
        <h3><%= t('groups.student_interface.group_options') %></h3>
        <% if @grouping.group.group_name == @current_user.user_name &&
          !@assignment.past_collection_date?(@current_user.section) && @assignment.group_max > 1 %>
          <p><%= t('groups.student_interface.working_alone') %></p>
        <% end %>

        <% # Student not reached the group max and is not working alone
           if @grouping.inviter == @current_user &&
             @assignment.student_form_groups &&
             !@assignment.past_collection_date?(@current_user.section) &&
             @grouping&.extension.nil?%>
          <% # Student has reached the group max and is not working alone
             if @grouping.student_membership_number < @assignment.group_max &&
               @grouping.group.group_name != @current_user.user_name %>
            <%= button_tag t('groups.members.invite'), onclick: 'invite(); return false;' %>
          <% elsif @grouping.student_membership_number ==
            @assignment.group_max &&
            @grouping.group.group_name != @current_user.user_name %>
            <p><%= t('groups.student_interface.may_not_add_more') %></p>
          <% end %>
        <% else %>
          <p><%= t('groups.student_interface.may_not_modify') %></p>
        <% end %>

        <% if !@grouping.nil? && @assignment.group_max > 1 &&
          !@assignment.past_collection_date?(@current_user.section) &&
          !@grouping.has_submission? %>
          <% if @grouping.inviter == @current_user &&
            @grouping.accepted_students.size == 1 &&
            @grouping.extension.nil? %>
            <%= button_to t('helpers.submit.delete', model: Group.model_name.human),
                          assignment_group_path(@assignment.id),
                          method: :delete,
                          data: { confirm: t('groups.student_interface.confirm_delete_group') }
            %>
          <% else %>
            <p><%= t('groups.student_interface.not_allowed_to_delete_group') %></p>
          <% end %>
        <% end %>
      <% end %>

      <h3><%= t('groups.student_interface.group_properties') %></h3>
      <ul>
        <% if @assignment.section_groups_only && Section.any? %>
          <li><%= t('groups.student_interface.section_groups_only') %></li>
        <% end %>

        <% if @assignment.student_form_groups &&
          !@assignment.invalid_override &&
          @assignment.group_max > 1 %>
          <li><%= Assignment.human_attribute_name(:student_form_groups) %>.</li>
          <li>
            <%= t('groups.student_interface.group_size_html',
                  group_min: @assignment.group_min,
                  group_max: @assignment.group_max) %>
          </li>
        <% elsif @assignment.invalid_override %>
          <li><%= Assignment.human_attribute_name(:invalid_override) %>.</li>
        <% else %>
          <li><%= t('groups.student_interface.students_work_alone') %></li>
        <% end %>
      </ul>
    </div>
  </div>
</div>

<% # HTML for the invite dialog
   if !@grouping.nil? && @grouping.inviter == @current_user && !@assignment.invalid_override %>
  <aside class='dialog' id='invite_dialog'>
    <%= form_tag(invite_member_assignment_groups_path(assignment_id: @assignment.id, grouping_id: @grouping.id),
                 { onsubmit: "document.getElementById('working').style.display = '';" }) do %>
      <h2><%= t('groups.members.invite') %></h2>
      <p><%= t('groups.members.invite_instructions') %></p>
      <label for='invite_member'><%= User.human_attribute_name(:user_name).pluralize %></label>
      <%= text_field_tag 'invite_member' %>

      <section class='dialog-actions'>
        <%= submit_tag t('groups.members.invite') %>
        <input type='reset'
               value='<%= t(:cancel) %>'
               onclick="invite_modal.close();
                        document.getElementById('working').style.display = 'none';">
      </section>
    <% end %>
  </aside>
<% end %>
