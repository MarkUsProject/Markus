<script>
  var invite_modal = null;

  function invite() {
    invite_modal.open();
    document.getElementById('invite_member').value = '';
    document.getElementById('invite_member').focus();
  }

  $(document).ready(function() {
    invite_modal = new ModalMarkus('#invite_dialog');
  });
</script>

<div class='title_bar'>
  <h1>
    <%= "#{Assignment.model_name.human} #{@assignment.short_identifier}" %>
  </h1>
</div>

<%= render partial: 'shared/flash_message' %>

<div class='student_columns'>
  <div id='student_column_left'>
    <div class='block'>
      <%= render partial: 'read', locals:{ peer_review: false } %>
    </div>

    <div class='block'>
      <h2><%= Submission.model_name.human.pluralize %></h2>

      <div class='block_content'>
        <% if @grouping.nil? %>
          <p class='notice'><%= t('submissions.student.no_submission') %></p>
        <% else %>
          <% unless @grouping.is_valid? %>
            <p class='warning'>
              <%= t('submissions.student.invalid_group_cannot_submit') %>
            </p>
          <% end %>
          <div class='sub_block'>
            <span class='prop_label'><%= t('submissions.student.last_revision_date') %></span>
            <span class="prop_paragraph">
              <%= l(@last_modified_date) %>
            </span>
          </div>
          <span class='info'><%= t('submissions.student.files_submitted', count: @num_submitted_files) %></span>
          <br>
          <span class='info <%= @num_missing_assignment_files > 0 ? 'red' : '' %>'>
            <%= t('submissions.student.missing_required_files', count: @num_missing_assignment_files) %>
          </span>

          <br>
        <% end %>
      </div>
    </div>
  </div>

  <div id='student_column_right'>
    <div class='block'>
      <h2><%= t('groups.student_interface.group_information') %></h2>

      <div class='block_content'>
        <% # If student has no group, inform them
           if @grouping.nil? %>
          <p class='notice'>
            <%= t('groups.student_interface.no_group_yet') %>
            <% if !@assignment.scanned_exam && @assignment.past_collection_date?(@current_user.section) %>
              <%= t('assignments.due_date.final_due_date_passed') %>
            <% end %>
          </p>

          <% # Test if the student can form groupings or not
             unless @assignment.student_form_groups %>
            <p>
              <%= t('groups.student_interface.not_allowed_to_form_group') %>
            </p>
          <% end %>

          <% # See if the student has been invited to some group
             if @current_user.has_pending_groupings_for?(@assignment.id) %>
            <h3><%= t('groups.members.invitations') %></h3>

            <% @current_user.pending_groupings_for(@assignment.id).each do |grouping|%>
              <div class='sub_block'>
                <p><%= t('groups.members.invited_by',
                         inviter_last_name: grouping.inviter.last_name,
                         inviter_first_name: grouping.inviter.first_name) %>
                </p>
                <% grouping.student_memberships.includes(:user).each do |member|%>
                  <ul>
                    <%= render partial: 'assignments/member',
                               locals: { member: member,
                                         grouping: grouping } %>
                  </ul>
                <% end -%>
                <% if !@assignment.scanned_exam && @assignment.past_collection_date?(@current_user.section) %>
                  <p class='information'>
                    <%= t('groups.student_interface.may_not_join') %>
                  </p>
                <% else %>
                  <%= link_to t('groups.members.join'),
                              accept_invitation_assignment_groups_path(assignment_id: @assignment.id, grouping_id: grouping.id),
                              { method: :patch, class: 'button' } %>
                  <%= link_to t('groups.members.decline'),
                              decline_invitation_assignment_groups_path(assignment_id: @assignment.id, grouping_id: grouping.id),
                              { class: 'button',
                                method: :patch, data: { confirm: t('groups.members.decline_invitation_confirm') } } %>
                <% end %>
              </div>
            <% end %>
          <% end %>

          <% # If students are allowed to form groups and
             # the grace period for this assignment has not yet passed,
             # render UI elements for group creation
             if !@assignment.past_collection_date?(@current_user.section) && @assignment.student_form_groups %>

            <h3><%= t('groups.student_interface.form_group') %></h3>

            <% if @current_user.has_pending_groupings_for?(@assignment.id) %>
              <% confirm = t('groups.student_interface.confirm_create_group') %>
            <% else %>
              <% confirm = nil %>
            <% end %>
            <% if @assignment.group_min == 1 %>
              <p>
                <%= link_to t('groups.student_interface.work_alone'),
                            assignment_groups_path(assignment_id: @assignment.id, workalone: 'true'),
                            { class: 'button', method: :post,
                              data: { confirm: confirm, disable_with: t(:please_wait) } } %>
              </p>
            <% end %>
            <p>
              <%= link_to t('helpers.submit.create', model: Group.model_name.human),
                          assignment_groups_path(@assignment.id),
                          { class: 'button', method: :post,
                            data: { confirm: confirm,
                                    disable_with: t(:please_wait) } } %>
            </p>
          <% end %>
        <% else %>
          <%# Since the student has a group already, we display information about the group only %>
          <%# Check if groupname should be displayed %>
          <h3>
            <% if @assignment.group_name_displayed %>
              <%= @grouping.group.group_name %>
            <% else %>
              <%= t('groups.student_interface.your_group') %>
            <% end %>
          </h3>
          <% # Display group properties are read only warning
             # when the due date and grace period (if any) have passed.
             if @assignment.past_collection_date?(@current_user.section) && @assignment.student_form_groups &&
                !@assignment.invalid_override && @assignment.group_max > 1 %>
            <p class='information'>
              <%= t('groups.student_interface.modification_limited') %>
            </p>
          <% end %>

          <% # If the group does not have the right amount of members yet, display
             # 'group is not valid' warning.
             unless @grouping.is_valid? %>
            <p class='warning'>
              <%= t('groups.student_interface.invite_more_students') %>
            </p>
          <% end %>

          <%# For each member of this group, display name and status %>
          <ul>
            <% @grouping.student_memberships.includes(:user).each do |member|%>
              <%= render partial: 'assignments/member',
                         locals: { member: member,
                                   grouping: @grouping } %>
            <% end %>
          </ul>

          <% # Display the URL of this group's repository if applicable
             if @assignment.vcs_submit %>
            <h3><%= t('groups.student_interface.url_group_repository') %></h3>
            <div class='sub_block'>
              <a href='<%= @grouping.group.repository_external_access_url %>'><%= @grouping.group.repository_external_access_url %></a>
            </div>
          <% end %>
        <% end %>

        <% unless @grouping.nil? %>
          <div class='group-options'>
            <h3><%= t('groups.student_interface.group_options') %></h3>
            <% if @grouping.group.group_name == @current_user.user_name &&
                   !@assignment.past_collection_date?(@current_user.section) && @assignment.group_max > 1 %>
              <p><%= t('groups.student_interface.working_alone') %></p>
            <% end %>

            <% # Student not reached the group max and is not working alone
               if @grouping.inviter == @current_user &&
                  @assignment.student_form_groups &&
                  !@assignment.past_collection_date?(@current_user.section) &&
                  @grouping&.extension.nil?%>
              <% # Student has reached the group max and is not working alone
                 if @grouping.student_membership_number < @assignment.group_max &&
                     @grouping.group.group_name != @current_user.user_name %>
                <div class='group-button'>
                  <%= button_tag t('groups.members.invite'), onclick: 'invite(); return false;' %>
                </div>
              <% elsif @grouping.student_membership_number ==
                         @assignment.group_max &&
                       @grouping.group.group_name != @current_user.user_name %>
                <p><%= t('groups.student_interface.may_not_add_more') %></p>
              <% end %>
            <% else %>
              <p><%= t('groups.student_interface.may_not_modify') %></p>
            <% end %>

            <% if !@grouping.nil? && @assignment.group_max > 1 &&
                  !@assignment.past_collection_date?(@current_user.section) &&
                  !@grouping.has_submission? %>
              <% if @grouping.inviter == @current_user &&
                    @grouping.accepted_students.size == 1 &&
                    @grouping.extension.nil? %>
                <div class='group-button'>
                  <%= button_to t('helpers.submit.delete', model: Group.model_name.human),
                                assignment_group_path(@assignment.id),
                                method: :delete,
                                data: { confirm: t('groups.student_interface.confirm_delete_group') }
                                %>
                </div>
              <% else %>
                <p><%= t('groups.student_interface.not_allowed_to_delete_group') %></p>
              <% end %>
            <% end %>
          </div>
        <% end %>

        <h3><%= t('groups.student_interface.group_properties') %></h3>
        <ul>
          <% if @assignment.section_groups_only && Section.any? %>
            <li><%= t('groups.student_interface.section_groups_only') %></li>
          <% end %>

          <% if @assignment.student_form_groups &&
                !@assignment.invalid_override &&
                @assignment.group_max > 1 %>
            <li><%= Assignment.human_attribute_name(:student_form_groups) %>.</li>
            <li>
              <%= t('groups.student_interface.group_size_html',
                    group_min: @assignment.group_min,
                    group_max: @assignment.group_max) %>
            </li>
          <% elsif @assignment.invalid_override %>
            <li><%= Assignment.human_attribute_name(:invalid_override) %>.</li>
          <% else %>
            <li><%= t('groups.student_interface.students_work_alone') %></li>
          <% end %>
        </ul>
      </div>
    </div>
  </div>
</div>

<% # HTML for the invite dialog
   if !@grouping.nil? && @grouping.inviter == @current_user && !@assignment.invalid_override %>
  <aside class='dialog' id='invite_dialog'>
    <%= form_tag(invite_member_assignment_groups_path(assignment_id: @assignment.id, grouping_id: @grouping.id),
                 { onsubmit: "document.getElementById('working').style.display = '';" }) do %>
      <h2><%= t('groups.members.invite') %></h2>
      <p><%= t('groups.members.invite_instructions') %></p>
      <fieldset>
        <span><label for='invite_member'><%= User.human_attribute_name(:user_name).pluralize %></label></span>
        <%= text_field_tag 'invite_member'%>
      </fieldset>

      <section class='dialog-actions'>
        <%= submit_tag t('groups.members.invite') %>
        <input type='reset'
               value='<%= t(:cancel) %>'
               onclick="invite_modal.close();
                        document.getElementById('working').style.display = 'none';">
      </section>
    <% end %>
  </aside>
<% end %>
