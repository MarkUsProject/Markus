<% short_identifier = @assignment.is_peer_review? ?
     "#{@assignment.parent_assignment.short_identifier} #{PeerReview.model_name.human}" :
     @assignment.short_identifier %>

<h2><%= "#{short_identifier}: #{@assignment.description}" %></h2>

<div class='block-content'>
  <% if @assignment.message %>
    <p><%= @assignment.message %></p>
  <% end %>
  <% if @assignment.is_timed %>
    <%= render partial: 'timed_due_info' %>
  <% else %>
    <p>
      <strong><%= Assignment.human_attribute_name(:due_date) %></strong>:
      <%= I18n.l(@assignment.section_due_date(@current_user.try(:section))) %>
    </p>
    <% unless @grouping&.extension.nil? %>
      <p>
        <%= I18n.t('assignments.deadline_with_extension',
                   extension_deadline: I18n.l(@grouping&.due_date)) %>
      </p>
    <% end %>
  <% end %>

  <% if @assignment.display_grader_names_to_students && !@grouping.nil? %>
    <p><%= t('graders.assigned_graders') %>:
      <% if @grouping.ta_memberships.exists? %>
        <% @grouping.ta_memberships.each do |ta| %>
          <%= ta.user.last_name %>
        <% end -%>
      <% else -%>
        <%= t('graders.no_grader_assigned') %>
      <% end -%>
    </p>
  <% end %>

  <% unless @assignment.submission_rule.type == "NoLateSubmissionRule" || @grouping&.extension&.apply_penalty == false %>
    <h3><%= SubmissionRule.model_name.human.capitalize %></h3>
    <p><%= @assignment.submission_rule.class.human_attribute_name(:description) unless @assignment.is_timed %></p>

    <ul>
      <% if @grouping.nil? %>
        <li><%= t('grace_period_submission_rules.no_group_yet') %></li>
      <% elsif !@assignment.is_timed || !@grouping.start_time.nil? %>
        <% acc = 0 %>
        <% if @assignment.submission_rule.type == "GracePeriodSubmissionRule" %>
          <% remaining_credits = @grouping.available_grace_credits %>
          <% @assignment.submission_rule.periods.order(:id).each do |p| %>
            <% unless remaining_credits <= 0 %>
              <% acc += p.hours %>
              <% remaining_credits -= 1 %>
            <% end %>
          <% end %>
          <%# Relative remaining grace credits for the grouping %>
          <li>
            <strong>
              <%= t('grace_period_submission_rules.deadline_html') %>:
            </strong>
            <%= I18n.l(@grouping.due_date + acc.hours) %>
          </li>
        <% else %>
          <li>
            <strong>
              <%= t('penalty_period_submission_rules.deadline_html') %>:
            </strong>
            <% @assignment.submission_rule.periods.order(:id).each { |p| acc += p.hours } %>
            <% if @grouping.nil? %>
              <%= I18n.l(@assignment.section_due_date(@current_user.try(:section)) + acc.hours) %>
            <% else %>
              <%= I18n.l(@grouping.due_date + acc.hours) %>
            <% end %>
          </li>
        <% end %>
      <% end %>

      <%# Cannot assign Grace Period without first assigning a group. %>
      <% unless @grouping.nil? && @assignment.submission_rule.type == "GracePeriodSubmissionRule" %>
        <% if @assignment.submission_rule.type == "GracePeriodSubmissionRule" %>
          <% unless @grouping.nil? %>
            <li>
              <%= t('grace_period_submission_rules.group_credits_html',
                    available_grace_credits: @grouping.available_grace_credits) %>
            </li>
          <% end %>
        <% elsif @assignment.submission_rule.type == "PenaltyDecayPeriodSubmissionRule" %>
          <% @assignment.submission_rule.periods.order(:id).each do |p| %>
            <% if p == @assignment.submission_rule.periods.order(:id).first %>
              <li><%= t('penalty_decay_period_submission_rules.details_message_first',
                        deduction: p.deduction, interval: p.interval, hours: p.hours) %> </li>
            <% else %>
              <li><%= t('penalty_decay_period_submission_rules.details_message_other',
                        deduction: p.deduction, interval: p.interval, hours: p.hours) %> </li>
            <% end %>
          <% end %>
        <% elsif @assignment.submission_rule.type == "PenaltyPeriodSubmissionRule" %>
          <% deduction = hours = 0 %>
          <% @assignment.submission_rule.periods.order(:id).each do |p| %>
            <% deduction += p.deduction %>
            <% hours += p.hours %>
            <li><%= t('penalty_period_submission_rules.details_message',
                      hours: hours, deduction: deduction) %> </li>
          <% end %>
        <% end %>
      <% end %>
    </ul>
  <% end %>

  <% unless peer_review %>
    <h3><%= Submission.model_name.human.pluralize %></h3>
    <% if @grouping.nil? %>
      <p><%= t('submissions.student.no_submission') %></p>
    <% else %>
      <% unless @grouping.is_valid? %>
        <p class='warning'>
          <%= t('submissions.student.invalid_group_cannot_submit') %>
        </p>
      <% end %>
      <ul>
        <% if @num_submitted_files > 0 %>
          <li>
            <%= t('submissions.student.last_revision_date') %>
            <%= l(@last_modified_date) %>
          </li>
        <% end %>
        <li><%= t('submissions.student.files_submitted', count: @num_submitted_files) %></li>
      </ul>

      <h3><%= Assignment.human_attribute_name(:assignment_files) %></h3>
      <% if @assignment.assignment_files.length == 0 %>
        <p><%= t('assignments.no_required_files') %></p>
      <% else %>
        <ul>
          <% @assignment.assignment_files.each do |assignment_file| %>
            <li><%= assignment_file.filename %></li>
          <% end %>
        </ul>
        <p>
          <% text = t('submissions.student.missing_required_files', count: @num_missing_assignment_files) %>
          <% if @num_missing_assignment_files > 0 %>
            <strong><%= text %></strong>
          <% else %>
            <%= text %>
          <% end %>
        </p>
      <% end %>
    <% end %>
<% end %>
<% unless @assignment.starter_file_updated_at.nil? || @grouping.nil? %>
  <% if !@assignment.is_timed || !@grouping.start_time.nil? %>
    <h3><%= I18n.t('assignments.starter_file.title') %></h3>
    <p><%= I18n.t('assignments.starter_file.provided') %></p>
    <p><%= I18n.t('assignments.starter_file.changed_at',
                  changed_date: I18n.l(@assignment.starter_file_updated_at)) %></p>
    <p><%= I18n.t('assignments.starter_file.download_instructions') %></p>
    <%= button_to t(:download),
                  download_starter_file_assignment_groups_path(@assignment),
                  method: 'get' %>
  <% end %>
<% end %>
</div>
