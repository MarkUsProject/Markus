<script>
  var grace_periods = null;
  var penalty_decay_periods = null;
  var penalty_periods = null;

  function create_grace_periods() {
    if(!grace_periods) {
      grace_periods = new PeriodDeltaChain({
        period_root_id: 'grace_periods',
        date_format: I18n.t('time.format_string.js'),
        due_date: $('#assignment_due_date').val()
      });
    }
  }

  function create_penalty_decay_periods() {
    if(!penalty_decay_periods) {
      penalty_decay_periods = new PeriodDeltaChain({
        period_root_id: 'penalty_decay_periods',
        date_format: I18n.t('time.format_string.js'),
        due_date: $('#assignment_due_date').val()
      });
    }
  }

  function create_penalty_periods() {
    if(!penalty_periods) {
      penalty_periods = new PeriodDeltaChain({
        period_root_id: 'penalty_periods',
        date_format: I18n.t('time.format_string.js'),
        due_date: $('#assignment_due_date').val()
      });
    }
  }

  function check_required_fields() {
    var invalid = false;
    $('input[required]:not([disabled])').each(function() {
      if (this.value === '') {
        invalid = true;
      }
    });

    var filename_re = /^[\-\._a-zA-Z0-9][\/\-\._a-zA-Z0-9]*$/;
    $('.assignment_file').each(function() {
      if (!filename_re.exec(this.value)) {
        invalid = true;
        // _constants.scss $red
        $(this).css('background-color', '#fe2a2a');
      } else {
        $(this).css('background-color', '');
      }
    });

    $('input[type="submit"]').prop('disabled', invalid);
  }

  function add_assignment_file() {
    var new_id = new Date().getTime();
    var input_id = 'assignment_assignment_files_attributes_' + new_id +
                   '_filename';
    var assignment_file = '<p id="' + input_id + '_holder">' +
      '<label class="required" for="' + input_id + '">' + I18n.t('filename') + '</label>' +
      '<input type="text" required="required" name="assignment[assignment_files_attributes][' +
      new_id + '][filename]" id="' + input_id + '"class="assignment_file" />' +
      '<a onclick="remove_assignment_file(\''+input_id+'\'); return false;">' +
      I18n.t('remove') + '</a></p>';
    $('#assignment_files').append($(assignment_file));

    $('#only_required_files_option').removeClass('disable');
  }

  function remove_assignment_file(input_id) {
    $('#' + input_id + '_holder').remove();
    if ($('.assignment_file').length === 0) {
      $('#only_required_files_option').addClass('disable');
    }
  }

  function add_period(id, periods) {
    var last_period = $('#' + id + ' .period').last();
    var new_period = last_period.clone();
    var id_re = new RegExp(/([_\[])[0-9]+([_\]])/);
    var repl = '$1' + new Date().getTime() + '$2';
    new_period.find('input').each(function () {
      if ($(this).attr('id')) {
        $(this).attr('id', $(this).attr('id').replace(id_re, repl));
      }
      if ($(this).attr('name')) {
        $(this).attr('name',
                          $(this).attr('name').replace(id_re, repl));
      }
      $(this).val('');
    });
    new_period.find('label').each(function () {
      $(this).attr('for', $(this).attr('for').replace(id_re, repl));
    });
    $('#' + id + '_table').append(new_period);

    if (periods) {
      periods.refresh();
    }
  }

  function remove_period(elem, periods) {
    $(elem).parents('.period').remove();
    if (periods) {
      periods.refresh();
    }
  }

  function check_due_date(new_due_date) {
    if (moment(new_due_date, I18n.t('time.format_string.js')).isBefore(moment())) {
      alert(I18n.t('past_due_date_edit_warning'));
    }
  }

  $(document).ready(function() {
    // Set locale for language localisation with Moment.js
    moment.locale(document.getElementById('locale').value);

    // Handle periods and hiding/showing things
    if ($('#assignment_due_date').val()) {
      create_grace_periods();
      create_penalty_decay_periods();
      create_penalty_periods();

      grace_periods.refresh();
      penalty_decay_periods.refresh();
      penalty_periods.refresh();

      toggle_remark_requests(<%= @assignment.allow_remarks? %>);
    }

    // Handle required fields
    check_required_fields();
    $(document).on("change", $('input[required]'), check_required_fields)
                    .on("keyup", $('input[required]'), check_required_fields)
                    .on("click", $('#assignment_file_add_link'), check_required_fields);

    // Handle date/time pickers
    // TODO: Set defaults globally for datetimepicker
    $.extend($.timepicker._defaults, {
    controlType: 'select',
    showTime: false,
    showTimezone: false,
    numberOfMonths: 2,
    secondMax: 0,
    prevText: I18n.t('time.prev'),
    nextText: I18n.t('time.next'),
    closeText: I18n.t('close'),
    hourText: I18n.t('datetime.prompts.hour'),
    minuteText: I18n.t('datetime.prompts.minute'),
    timeText: I18n.t('datetime.prompts.time'),

    monthNames: I18n.t('date.month_names').slice(1), // Drop first null element
    dayNames: I18n.t('date.day_names'),
    dayNamesMin: I18n.t('date.abbr_day_names'),

    dateFormat: I18n.t('date.format_string.datetimepicker'),
    timeFormat: I18n.t('time.format_string.time_only')
  });

  $('.section_due_date_input').each(function() {
      $(this).datetimepicker({
        onClose:          check_due_date,
      });
    });

    $('#assignment_due_date').datetimepicker({
      onClose:          check_due_date,
    });

    $('#assignment_remark_due_date').datetimepicker({
      onClose:          check_due_date,
    });
  });
</script>
