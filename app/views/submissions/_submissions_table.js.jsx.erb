<script type='text/jsx'>
  /** @jsx React.DOM */
  var MAX_TAGS = 5;

  var SubmissionsTable = React.createClass({
    getDefaultProps: function() {
      // Defines the columns used for the table and whether they
      // are sortable searchable. The default initially sorted
      // column is the first sortable column in the array.
      return {
        columns: [
          {
            id: 'group_name',
            content: '<%= @assignment.is_peer_review? ? I18n.t(:'browse_submissions.reviewer_name') :
                                                        I18n.t(:'browse_submissions.group_name') %>',
            sortable: true,
            compare: compare_anchor_text,
            searchable: true
          },
          <% unless @assignment.is_peer_review? %>
            {
              id: 'repository',
              content: '<%= j raw I18n.t(:'browse_submissions.repository') %>',
              sortable: true,
              compare: compare_anchor_text,
              searchable: true
            },

            <%= raw @section_column  %>
            {
              id: 'commit_date',
              content: '<%= j raw I18n.t(:'browse_submissions.commit_date') %>',
              sortable: true,
              compare: compare_dates,
              searchable: false
            },
          <% end %>
          <% if @assignment.is_peer_review? %>
            {
              id: 'reviewees',
              content: '<%= j raw I18n.t(:'browse_submissions.reviewee_name') %>',
              sortable: true,
              searchable: false
            },
          <% end %>
          {
            id: 'marking_state',
            content: '<%= j raw I18n.t(:'browse_submissions.marking_state') %>',
            sortable: true,
            searchable: false
          },
          <% unless @assignment.is_peer_review? %>
            <%= raw @grace_credit_column %>
            {
              id: 'tags',
              content: <ul className='tag_list' dangerouslySetInnerHTML={{__html: '<li>' +
                    '<%= j raw I18n.t(:'browse_submissions.tags_used') %>' +
                    /* TODO: Use this code to complete a tag search feature
                       in the table.
                      '<ul class="tag_dropdown">' +
                      '<li class="tag_list_title">' +
                        '<%= j raw I18n.t(:'browse_submissions.tags_search') %>' +
                      '</li>' +
                      '<li class="tag_list_search">' +
                        '<%= text_field_tag 'name' %>' +
                      '</li>' +
                      '<li class="tag_list_title">' +
                        '<%= j raw I18n.t(:'browse_submissions.tags_list') %>' +
                      '</li>'
                    '</ul>' +*/
                  '</li>'}} />,
              sortable: false,
              searchable: false
            },
            {
              id: 'final_grade',
              content: '<%= j raw I18n.t(:'browse_submissions.final_grade') %>',
              sortable: true,
              compare: compare_numeric_values,
              searchable: false
            }
          <% end %>
        ],
        filters: [
          {
            name: 'all',
            text: '<%= j raw t(:'browse_submissions.show_all') %>',
            func: function(submission) {
              return true;
            }
          },
          <% unless @assignment.is_peer_review? %>
            {
              name: 'remark_requested',
              text: '<%= j raw t(:'browse_submissions.show_remark_request') %>',
              func: function(submission) {
                return submission.state == 'remark';
              }
            },
            {
              name: 'unmarked',
              text: '<%= j raw t(:'browse_submissions.show_unmarked') %>',
              func: function(submission) {
                return submission.state == 'unmarked';
              }
            },
            {
              name: 'complete',
              text: '<%= j raw t(:'browse_submissions.show_complete') %>',
              func: function(submission) {
                return submission.state == 'completed';
              }
            },
          <% end %>
          {
            name: 'partial',
            text: '<%= j raw t(:'browse_submissions.show_partial') %>',
            func: function(submission) {
              return submission.state == 'partial';
            }
          },
          {
            name: 'released',
            text: '<%= j raw t(:'browse_submissions.show_released') %>',
            func: function(submission) {
              return submission.state == 'released';
            }
          }
        ]
      };
    },
    getInitialState: function() {
      return {
        submissions: [],
        selected_submissions: [],
      };
    },
    componentWillMount: function() {
      this.refresh();
    },
    updateSelectedSubmissions: function(submissions) {
      this.setState({selected_submissions: submissions});
    },
    // Asks for new info from backend and sets props accordingly.
    refresh: function() {
      // Show working indicator.
      document.getElementById('working').style.display = '';

      jQuery.ajax({
        url: 'populate_submissions_table',
        method: 'GET',
        dataType: 'json',
        success: function(data) {
          this.setState({
            submissions: data,
          });
        }.bind(this),
        // Close working indicator.
        complete: function() {
          document.getElementById('working').style.display = 'none';
        }
      });
    },
    renderRevieweeList: function(reviewees) {
      return (
        <div>
          {reviewees.map(function(reviewee) {
            return  <a href={reviewee.reviewee_url}> {reviewee.reviewee_name} </a>
          })}
        </div>
      );
    },
    renderMarkingState: function(state) {
      if (state === 'released') {
        return (<%= image_tag('icons/email_go.png',
                              alt: t('marking_state.released'),
                              title: t('marking_state.released')) %>);
      } else if (state === 'unmarked') {
        return (<%= image_tag('icons/shape_square.png',
                              alt: t('marking_state.not_collected'),
                              title: t('marking_state.not_collected')) %>);
      } else if (state === 'partial') {
        return (<%= image_tag('icons/pencil.png',
                              alt: t('marking_state.in_progress'),
                              title: t('marking_state.in_progress')) %>);
      } else if (state === 'completed') {
        return (<%= image_tag('icons/accept.png',
                              alt: t('marking_state.completed'),
                              title: t('marking_state.completed')) %>);
      } else if (state === 'remark') {
        return (<%= image_tag('icons/double_exclamation.png',
                              alt: t('marking_state.remark_requested'),
                              title: t('marking_state.remark_requested')) %>);
      } else {
        return 'Invalid marking state';
      }
    },

    render: function() {
      // Do student-specific table stuff here.
      // possibly move this to getdefaultprops.

      // need to filter for each section
      var sections = <%= raw @sections.to_json %>;
      if (sections.length > 0) {
        var section_filters = sections.map(function(section) {
          var filter = {
            name: section.name,
            text: section.name,
            func: function(group) {
              return group.section === section.name;
            }
          };
          return filter;
        });
        var all = '<%= I18n.t('browse_submissions.sections.all') %>';
        section_filters.unshift({name: all, text: all, func: function(g) { return g; } });
      }

      var submissions_data = this.state.submissions.map(function(submission) {
        var s = {};
        s['id'] = submission.id;
        if (submission.name_url === '') {
          s['group_name'] = <span>{submission.name}</span>;
        } else {
          s['group_name'] = <a href={submission.name_url}>{submission.name}</a>;
        }
        if (submission.error !== '') {
          s['class_name'] = "submission_error";
        } else {
          var tag_list = []
          for (var i = 0; i < MAX_TAGS && i < submission.tags.length; i++) {
            tag_list.push(<span className='tag_element'>{submission.tags[i].name}</span>);
          }

          s['class_name'] = submission.class_name;
          if (!submission.has_files) {
            s['repository'] = (<span>
              <%= image_tag('icons/folder_error.png',
                            title: t(:no_files_submitted)) %>
              <a href={submission.repo_url}>{submission.repo_name}</a>
            </span>);
          } else {
            s['repository'] = <a href={submission.repo_url}>{submission.repo_name}</a>;
          }
          if (submission.late_commit) {
            s['commit_date'] = (<span>
              <%= image_tag('icons/clock_error.png',
                            title: t(:past_due_date_edit_result_warning,
                            href: t(:last_commit))) %>
              {submission.commit_date}
            </span>);
          } else {
            s['commit_date'] = submission.commit_date;
          }
          s['state'] = submission.state;
          s['marking_state'] = this.renderMarkingState(submission.state);
          s['grace_credits_used'] = submission.grace_credits_used;
          s['tags'] = <div className='tag_list'>{tag_list}</div>;
          s['final_grade'] = submission.final_grade;
          s['section'] = submission.section;
          s['has_files'] = submission.has_files;
          <% if @assignment.is_peer_review? %>
            s['reviewees'] = this.renderRevieweeList(submission.reviewees);
          <% end %>
        }
        return s;
      }.bind(this));

      return (
        <div>
          <SubmissionsActionBox
            selected_submissions={this.state.selected_submissions}
            refresh={this.refresh}
          />
          <Table data={submissions_data}
            columns={this.props.columns}
            selectable={true}
            filters={this.props.filters}
            secondary_filters={section_filters}
            filter_type={true}
            onSelectedRowsChange={this.updateSelectedSubmissions}
            search_placeholder={'<%= j raw I18n.t('browse_submissions.search_submissions') %>'}
          />
        </div>
      );
    }
  });

  var SubmissionsActionBox = React.createClass({
    propTypes: {
      selected_submissions: React.PropTypes.array
    },
    // TODO: releasePeerReviews and unreleasePeerReviews will make POST calls to their own methods
    releasePeerReviews: function() {
      var dataLoad = {
        release_results: true,
        filter: 'none',
        groupings: this.props.selected_submissions
      };
      jQuery.ajax({
        method: 'POST',
        url: 'update_submissions',
        data: dataLoad,
        success: function(data) {
          this.props.refresh();
        }.bind(this)
      });
    },
    unreleasePeerReviews: function() {
      var dataLoad = {
        release_results: false,
        filter: 'none',
        groupings: this.props.selected_submissions
      };
      jQuery.ajax({
        method: 'POST',
        url: 'update_submissions',
        data: dataLoad,
        success: function(data) {
          this.props.refresh();
        }.bind(this)
      });
    },
    releaseMarks: function() {
      var dataLoad = {
        release_results: true,
        filter: 'none',
        groupings: this.props.selected_submissions
      };
      jQuery.ajax({
        method: 'POST',
        url: 'update_submissions',
        data: dataLoad,
        success: function(data) {
          this.props.refresh();
        }.bind(this)
      });
    },
    unreleaseMarks: function() {
      var dataLoad = {
        release_results: false,
        filter: 'none',
        groupings: this.props.selected_submissions
      };
      jQuery.ajax({
        method: 'POST',
        url: 'update_submissions',
        data: dataLoad,
        success: function(data) {
          this.props.refresh();
        }.bind(this)
      });
    },
    uncollectAllSubmissions: function() {
      var confirm = window.confirm("<%= t('collect_submissions.undo_results_loss_warning') %>");
      if (!confirm) { return; }
      jQuery.ajax({
        method: 'GET',
        url: 'uncollect_all_submissions',
      });
    },
    collectSubmissions: function() {
      var confirm = window.confirm("<%= t('collect_submissions.results_loss_warning') %>");
      if (!confirm) { return; }

      var dataLoad = {
        groupings: this.props.selected_submissions
      };
      jQuery.ajax({
        method: 'POST',
        url: 'collect_submissions',
        data: dataLoad,
        success: function(data) {
          if (data.success) {
            window.setInterval(this.props.refresh, 30000);
          }
        }.bind(this)
      });
    },
    runTests: function () {
      jQuery.ajax({
        method: 'POST',
        url: 'run_tests',
        data: {groupings: this.props.selected_submissions},
        success: function(data) {
          if (data.success) {
            window.setInterval(this.props.refresh, 30000);
          }
        }.bind(this)
      })
    },
    render: function() {
      return (
        <div className='react-release-marks'>
          <% if @assignment.is_peer_review? %>
            <button onClick={this.releasePeerReviews}>
            <%= j raw I18n.t('browse_submissions.release_prs') %>
            </button>
            <button onClick={this.unreleasePeerReviews}>
            <%= j raw t('browse_submissions.unrelease_prs') %>
            </button>
          <% end %>
          <% if @current_user.admin? && !@assignment.is_peer_review? %>
            <button onClick={this.collectSubmissions}>
              <%= j raw I18n.t('collect_submissions.collect') %>
            </button>
            <% if @assignment.has_a_collected_submission? %>
              <% if false %>
              <button onClick={this.uncollectAllSubmissions}
                      data-remote='true'>
                <%= j raw I18n.t('collect_submissions.uncollect_all') %>
              </button>
              <% end %>
              <button onClick={this.runTests}
                      data-remote='true'>
                <%= j raw t('browse_submissions.run_tests') %>
              </button>
            <% end %>
          <% end %>
          <% if @assignment.has_a_collected_submission? %>
            <button onClick={this.releaseMarks}>
              <%= j raw t('browse_submissions.release_marks') %>
            </button>
            <button onClick={this.unreleaseMarks}>
              <%= j raw t('browse_submissions.unrelease_marks') %>
            </button>
          <% end %>
        </div>
      );
    }
  });

  React.renderComponent(<SubmissionsTable />, document.getElementById('submissions_table'));
</script>
