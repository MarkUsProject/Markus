<script type='text/jsx'>
  /** @jsx React.DOM */
  var MAX_TAGS = 5;

  var SubmissionsTable = React.createClass({
    getDefaultProps: function() {
      // Defines the columns used for the table and whether they
      // are sortable searchable. The default initially sorted
      // column is the first sortable column in the array.
      return {
        columns: [
          {
            id: 'group_name',
            content: '<%= j raw I18n.t(:'browse_submissions.group_name') %>',
            sortable: true,
            compare: compare_anchor_text,
            searchable: true
          },
          {
            id: 'repository',
            content: '<%= j raw I18n.t(:'browse_submissions.repository') %>',
            sortable: true,
            compare: compare_anchor_text,
            searchable: true
          },
          <%= raw @section_column  %>
          {
            id: 'commit_date',
            content: '<%= j raw I18n.t(:'browse_submissions.commit_date') %>',
            sortable: true,
            compare: compare_dates,
            searchable: false
          },
          {
            id: 'marking_state',
            content: '<%= j raw I18n.t(:'browse_submissions.marking_state') %>',
            sortable: true,
            searchable: false
          },
          <%= raw @grace_credit_column %>
          {
            id: 'tags',
            content: <ul className='tag_list' dangerouslySetInnerHTML={{__html: '<li>' +
                  '<%= j raw I18n.t(:'browse_submissions.tags_used') %>' +
                  /* TODO: Use this code to complete a tag search feature
                     in the table.
                    '<ul class="tag_dropdown">' +
                    '<li class="tag_list_title">' +
                      '<%= j raw I18n.t(:'browse_submissions.tags_search') %>' +
                    '</li>' +
                    '<li class="tag_list_search">' +
                      '<%= text_field_tag 'name' %>' +
                    '</li>' +
                    '<li class="tag_list_title">' +
                      '<%= j raw I18n.t(:'browse_submissions.tags_list') %>' +
                    '</li>'
                  '</ul>' +*/
                '</li>'}} />,
            sortable: false,
            searchable: false
          },
          {
            id: 'final_grade',
            content: '<%= j raw I18n.t(:'browse_submissions.final_grade') %>',
            sortable: true,
            compare: compare_numeric_values,
            searchable: false
          }
        ],
        filters: [
          {
            name: 'all',
            text: '<%= j raw I18n.t(:'browse_submissions.show_all') %>',
            func: function(submission) {
              return true;
            }
          },
          {
            name: 'unmarked',
            text: '<%= j raw I18n.t(:'browse_submissions.show_unmarked') %>',
            func: function(submission) {
              return submission.state == 'unmarked';
            }
          },
          {
            name: 'partial',
            text: '<%= j raw I18n.t(:'browse_submissions.show_partial') %>',
            func: function(submission) {
              return submission.state == 'partial';
            }
          },
          {
            name: 'complete',
            text: '<%= j raw I18n.t(:'browse_submissions.show_complete') %>',
            func: function(submission) {
              return submission.state == 'complete';
            }
          },
          {
            name: 'released',
            text: '<%= j raw I18n.t(:'browse_submissions.show_released') %>',
            func: function(submission) {
              return submission.state == 'released';
            }
          }
        ]
      };
    },
    getInitialState: function() {
      return {
        error: [],
        submissions: [],
        selected_submissions: [],
      };
    },
    componentWillMount: function() {
      this.refresh();
    },
    updateSelectedSubmissions: function(submissions) {
      this.setState({selected_submissions: submissions});
    },
    // Asks for new info from backend and sets props accordingly.
    refresh: function() {
      // Show working indicator.
      document.getElementById('working').style.display = '';

      jQuery.ajax({
        url: 'populate_submissions_table',
        method: 'GET',
        dataType: 'json',
        success: function(data) {
          this.setState({error: []});
          data.each(function (submission) {
            if (submission.error !== '') {
              this.setState({error: this.state.error.concat([submission.error])});
            }
          }.bind(this));
          this.setState({
            submissions: data,
          });
        }.bind(this),
        error: function(xhr, status, text) {
          var error = text + ': ' + xhr.responseText;
          this.setState({
            error: error
          });
        }.bind(this),
        // Close working indicator.
        complete: function() {
          document.getElementById('working').style.display = 'none';
        }
      });
    },
    onError: function(error) {
      this.setState({error: error});
    },
    renderMarkingState: function(state) {
      if (state === 'unmarked') {
        return (<%= image_tag('icons/shape_square.png',
                              alt: t('marking_state.not_collected'),
                              title: t('marking_state.not_collected')) %>);
      } else if (state === 'partial') {
        return (<%= image_tag('icons/pencil.png',
                              alt: t('marking_state.in_progress'),
                              title: t('marking_state.in_progress')) %>);
      } else if (state === 'completed') {
        return (<%= image_tag('icons/accept.png',
                              alt: t('marking_state.completed'),
                              title: t('marking_state.completed')) %>);
      } else if (state === 'released') {
        return (<%= image_tag('icons/email_go.png',
                              alt: t('marking_state.released'),
                              title: t('marking_state.released')) %>);
      } else if (state === 'remark') {
        return (<%= image_tag('icons/double_exclamation.png',
                              alt: t('marking_state.remark_requested'),
                              title: t('marking_state.remark_requested')) %>);
      } else {
        return 'Invalid marking state';
      }
    },

    render: function() {
      // Do student-specific table stuff here.
      // possibly move this to getdefaultprops.

      var submissions_data = this.state.submissions.map(function(submission) {
        var s = {};
        s['id'] = submission.id;
        if (submission.name_url === '') {
          s['group_name'] = <span>{submission.name}</span>;
        } else {
          s['group_name'] = <span><a href={submission.name_url}>{submission.name}</a></span>;
        }
        if (submission.error !== '') {
          s['class_name'] = "submission_error";
        } else {
          var tag_list = []
          for (var i = 0; i < MAX_TAGS && i < submission.tags.length; i++) {
            tag_list.push(<span className='tag_element'>{submission.tags[i].name}</span>);
          }

          s['class_name'] = submission.class_name;
          s['repository'] = <a href={submission.repo_url}>{submission.repo_name}</a>;
          if (submission.late_commit) {
            s['commit_date'] = (<span>
              <%= image_tag('icons/error.png',
                            title: t(:past_due_date_edit_result_warning,
                            href: t(:last_commit))) %>
              {submission.commit_date}
            </span>);
          } else {
            s['commit_date'] = submission.commit_date;
          }
          s['marking_state'] = this.renderMarkingState(submission.state);
          s['grace_credits_used'] = submission.grace_credits_used;
          s['tags'] = <div className='tag_list'>{tag_list}</div>;
          s['final_grade'] = submission.final_grade;
          s['section'] = submission.section;
        }
        return s;
      }.bind(this));

        return (
          <div>
            <ErrorDiv error={this.state.error} />
            <SubmissionsActionBox
              selected_submissions={this.state.selected_submissions}
              onError={this.onError}
              refresh={this.refresh}
            />
            <Table data={submissions_data}
              columns={this.props.columns}
              selectable={true}
              filters={this.props.filters}
              filter_type={true}
              onSelectedRowsChange={this.updateSelectedSubmissions}
              search_placeholder={'<%= j raw I18n.t('browse_submissions.search_submissions') %>'}
            />
          </div>
        );
    }
  });

  var SubmissionsActionBox = React.createClass({
    propTypes: {
      selected_submissions: React.PropTypes.array
    },
    releaseMarks: function() {
      var dataLoad = {
        release_results: true,
        filter: 'none',
        groupings: this.props.selected_submissions
      };
      jQuery.ajax({
        method: 'POST',
        url: 'update_submissions',
        data: dataLoad,
        success: function(data) {
          this.props.refresh();
        }.bind(this),
        error: function(xhr, status, text) {
          var error = text + ': ' + xhr.responseText;
          this.props.onError(error);
        }.bind(this)
      });
    },
    unreleaseMarks: function() {
      var dataLoad = {
        release_results: false,
        filter: 'none',
        groupings: this.props.selected_submissions
      };
      jQuery.ajax({
        method: 'POST',
        url: 'update_submissions',
        data: dataLoad,
        success: function(data) {
          this.props.refresh();
        }.bind(this),
        error: function(xhr, status, text) {
          var error = text + ': ' + xhr.responseText;
          this.props.onError(error);
        }.bind(this)
      });
    },
    render: function() {
      return (
        <div className='react-release-marks'>
          <button onClick={this.releaseMarks}>
            <%= j raw I18n.t('browse_submissions.release_marks') %>
          </button>
          <button onClick={this.unreleaseMarks}>
            <%= j raw I18n.t('browse_submissions.unrelease_marks') %>
          </button>
        </div>
      );
    }
  });

  React.renderComponent(<SubmissionsTable />, document.getElementById('submissions_table'));
</script>
