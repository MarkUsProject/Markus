<%= javascript_include_tag 'file_manager' %>
<%= javascript_include_tag 'FilterTable/FilterTable.js' %>

<%= render partial: 'shared/navigation_warning',
           formats: [:js],
           handlers: [:erb] %>
<%= render partial: 'file_manager_boot',
           formats: [:js],
           handlers: [:erb] %>

<div class='title_bar'>
  <h1>
    <%= t('student.submission.file_manager',
          short_identifier: sanitize(@assignment.short_identifier)) %>
  </h1>
</div>

<div id='current_time'>
<%= render partial: 'server_time' %>

  <script>
    new PeriodicalExecuter(
      function() {
        new Ajax.Updater('current_time',
          '<%= server_time_assignment_submissions_path(@assignment.id) %>',
          {
            asynchronous:true,
            evalScripts:true,
            parameters:'authenticity_token=' + AUTH_TOKEN
          }
        )
    }, 60);
  </script>
</div>

<div class='wrapLeft'>
  <% if flash[:submit_notice] -%>
    <p class='success'><%= flash[:submit_notice] %></p>
  <% end %>

  <div id='directory_selector' <%=raw('style="display:none;"') unless @grouping.repository_external_commits_only? %>>
    <p>
      <%= I18n.t('student.submission.current_path') %>
      <% path_memory = '/'
         links = []
         @path.split('/').each do |folder|
         path_memory = File.join(path_memory, folder)
         links.push(link_to folder, action: 'file_manager', path: path_memory)
      end %>
      <%= link_to '[root]', action: 'file_manager', path: '/' %>
      <%= links.join('/')%>
    </p>
  </div>

  <% if flash[:transaction_warning] %>
    <div class='warning'><%= flash[:transaction_warning] %></div>
  <% end %>

  <% if flash[:success] %>
    <div class='success'><%= flash[:success] %></div>
  <% end %>

  <% if @assignment.submission_rule.can_collect_now? &&
        flash[:commit_notice] != @assignment.submission_rule.commit_after_collection_message %>
    <div class='warning'>
      <%= @assignment.submission_rule.after_collection_message %>
    </div>
  <% else %>
    <% if @assignment.section_past_due_date?(@grouping) %>
      <div class='warning'>
        <%= @assignment.submission_rule.overtime_message(@grouping) %>
      </div>
    <% end %>
  <% end %>

  <% if !@file_manager_errors.nil? && @file_manager_errors[:update_conflicts] %>
    <div class='error'>
      <h2><%= I18n.t('student.submission.conflicts') %></h2>
      <p><%= I18n.t('student.submission.file_conflicts') %></p>
      <ul>
        <% @file_manager_errors[:update_conflicts].each do |conflict| %>
          <li><%= conflict.to_s %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <% if flash[:commit_notice] %>
    <div class='warning'>
      <%= flash[:commit_notice] %>
    </div>
  <% end %>

  <% if !@file_manager_errors.nil? && @file_manager_errors[:commit_error] %>
    <div class='warning'>
      <%= @file_manager_errors[:commit_error] %>
    </div>
  <% end %>

  <% if !@grouping.is_valid? %>
    <div class='error'>
      <%= t(:invalid_group_warning) %>
    </div>
  <% elsif @missing_assignment_files.size > 0 %>
    <div class='warning'>
      <p>
        <%= I18n.t('student.submission.missing_files', file: @missing_assignment_files.size) %>
        <% if @missing_assignment_files.size > 5 %>
          <%= link_to_function I18n.t('student.submission.toggle_file_list'), "$('missing_assignment_files_list').toggle();"%>
        <% end %>
      </p>
      <ul id='missing_assignment_files_list' <%='style="display:none;"' if @missing_assignment_files.size > 5 %>>
        <% @missing_assignment_files.each do |assignment_file| %>
          <li><%= assignment_file.filename %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <%= form_tag update_files_assignment_submissions_path(@assignment.id),
               { multipart: true,
                 id: 'submit_form' } unless (!@grouping.is_valid? || @grouping.repository_external_commits_only?) %>

    <div class='global_action'>
      <% if (@grouping.is_valid? && !@grouping.repository_external_commits_only?) %>
        <%= button_to_function I18n.t('add_new'),
                               'injectFileInput(); set_onbeforeunload(true);' %>
      <% end %>

      <% if @grouping.is_valid? %>
        <%= submit_tag(I18n.t(:submit),
                       disabled: !@grouping.is_valid?,
                       onclick: 'set_onbeforeunload(false);') unless @grouping.repository_external_commits_only? %>
        <%= link_to(I18n.t(:cancel),
                    { controller: 'submissions',
                      action: 'file_manager' },
                   id: @assignment.id,
                   disabled: !@grouping.is_valid?,
                   class: 'button',
                   onclick: "set_onbeforeunload(false); return confirm('#{I18n.t(:discard_changes_message)}');"
                   ) unless @grouping.repository_external_commits_only? %>
      <% end %>
    </div>

    <div class='clear'></div>

    <table class='files' id='files'></table>

    <% if @grouping.is_valid? %>
      <div class='global_action'>
        <%= submit_tag(I18n.t(:submit),
                       disabled: !@grouping.is_valid?,
                       onclick: 'set_onbeforeunload(false);') unless @grouping.repository_external_commits_only? %>
        <%= link_to(I18n.t(:cancel),
                    { controller: 'submissions',
                      action: 'file_manager' },
                   id: @assignment.id,
                   disabled: !@grouping.is_valid?,
                   class: 'button',
                   onclick: "set_onbeforeunload(false); return confirm('#{I18n.t(:discard_changes_message)}');"
                   ) unless @grouping.repository_external_commits_only? %>
      </div>
    <% end %>
  </form>
</div>
