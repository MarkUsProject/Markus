<script type='text/jsx'>
  /** @jsx React.DOM */

  var FilesTable = React.createClass({
    getDefaultProps: function() {
      // Defines the columns used for the table and whether they
      // are sortable searchable. The default initially sorted
      // column is the first sortable column in the array.
      return {
        columns: [
          {
            id: 'filename',
            content: '<%= j raw I18n.t('browse_submissions.filename') %>',
            sortable: true,
            compare: compare_anchor_text,
            searchable: true
          },
          {
            id: 'last_revised_date',
            content: '<%= j raw I18n.t(:'browse_submissions.last_revised') %>',
            sortable: true,
            compare: compare_dates,
            searchable: true
          },
          {
            id: 'revision_by',
            content: '<%= j raw I18n.t(:'browse_submissions.revised_by') %>',
            sortable: true,
            searchable: true
          }
        ]
      };
    },

    getInitialState: function() {
      return {
        files: []
      };
    },

    componentWillMount: function() {
      this.refresh();
    },

    // Asks for new info from backend and sets props accordingly.
    refresh: function() {
      // Show working indicator.
      document.getElementById('working').style.display = '';

      $.ajax({
        url: '<%= repo_browser_assignment_submission_path(
          @grouping.assignment,
          id: @grouping.id,
          path: @path,
          revision_timestamp: @revision.server_timestamp,
          revision_identifier: @revision.revision_identifier) %>',
        method: 'POST',
        dataType: 'json',
        success: function(data) {
          this.setState({
            files: data
          });
        }.bind(this),
        // Close working indicator.
        complete: function() {
          document.getElementById('working').style.display = 'none';
        }
      });
    },

    render: function() {
      var files_data = this.state.files.map(function(file) {
        var f = {};
        f.id = file.id;
        f.filename = <span dangerouslySetInnerHTML={{__html: file.filename}} />;
        f.last_revised_date = new Date(file.last_revised_date).toLocaleString();
        f.revision_by = file.revision_by;
        return f;
      }.bind(this));

      return (
        <div>
          <Table data={files_data}
            columns={this.props.columns}
          />
        </div>
      );
    }
  });

  React.renderComponent(<FilesTable />, document.getElementById('files_table'));

  $('.datetimepicker').datetimepicker({
    altField:         '#actual_revision_timestamp',
    altFieldTimeOnly: false,
    altFormat:        'yy-mm-dd',
    altTimeFormat:    'HH:mm',
    altSeparator:     'T',
    controlType:      'select',
    showTime:         false,
    numberOfMonths:   2,
    secondMax:        0,
    dateFormat:       I18n.t('date.format_string.datetimepicker'),
    timeFormat:       I18n.t('time.format_string.time_only'),
    showTimezone:     false,
    monthNames:       I18n.t('date.month_names').slice(1), // Drop first null element
    dayNames:         I18n.t('date.day_names'),
    dayNamesMin:      I18n.t('date.abbr_day_names'),
    hourText:         I18n.t('datetime.prompts.hour'),
    minuteText:       I18n.t('datetime.prompts.minute'),
    timeText:         I18n.t('datetime.prompts.time'),
    prevText:         I18n.t('time.prev'),
    nextText:         I18n.t('time.next'),
    closeText:        I18n.t('close')
  });
</script>
