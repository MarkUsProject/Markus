#Render the source code for syntax highlighting...
  begin
    page['code_pane'].onmousemove = nil
    # Non-binary files

    if !SubmissionFile.is_binary?(@file_contents)

       if RUBY_VERSION > '1.9'
         begin
           @file_encode = @file_contents.encode(Encoding::UTF_8,
                                                Encoding::UTF_8)
           page.replace_html 'codeviewer',
             :partial => 'results/common/text_codeviewer',
             :locals => { :uid => params[:uid],
             :file_contents => @file_encode,
             :annots => @annots, :code_type => @code_type}
         rescue Exception => e
           page.alert e.message
           page.replace_html 'codeviewer',
             :partial => 'results/common/text_codeviewer',
             :locals => { :uid => params[:uid],
             :file_contents => @file_contents,
             :annots => @annots, :code_type => @code_type}
         end
       else
         begin
           @file_contents = Iconv.iconv('utf-8', 'utf-8', @file_contents)
         rescue Iconv::Failure
           @file_contents = Iconv.iconv('utf-8', 'ISO-8859-1', @file_contents)
         end
         page.replace_html 'codeviewer',
                           :partial => 'results/common/text_codeviewer',
                           :locals => { :uid => params[:uid],
                                        :file_contents => @file_contents,
                                        :annots => @annots, :code_type => @code_type}
       end
    # Supported image files
    elsif @file.is_supported_image?
      page.replace_html 'codeviewer',
        :partial => 'results/common/image_codeviewer',
        :locals => { :uid => params[:uid], :file_contents => @file_contents,
        :annots => @annots, :code_type => @code_type,
        :submission_file_id => @submission_file_id}
    # Pdf files    
    elsif @file.is_pdf?
      page.replace_html 'codeviewer',
        :partial => 'results/common/pdf_codeviewer',
        :locals => { :uid => params[:uid], :file_contents => @file_contents,
        :annots => @annots, :code_type => @code_type,
        :nb_files => @nb_pdf_files_to_download,
        :submission_file_id => @submission_file_id}
    else
      page.replace_html 'codeviewer',
        :partial => 'results/common/text_codeviewer',
        :locals => { :uid => params[:uid],
        :file_contents => I18n.t("submission_file.error.binary_file_message"),
        :annots => @annots, :code_type => @code_type}
    end

    # Also update the annotation_summary_list
    if @current_user.ta? || @current_user.admin?
      page.replace_html 'annotation_summary_list',
        :partial => 'results/marker/annotation_summary',
        :locals => {:annots => @all_annots,
        :submission_file_id => @submission_file_id}
      page.call "hide_all_annotation_content_editors"
    else
      page.replace_html 'annotation_summary_list',
        :partial => 'results/student/annotation_summary',
        :locals => {:annots => @all_annots,
        :submission_file_id => @submission_file_id}
    end



  rescue Exception => e
    # There's a bug in Rails as of 2.3.2 - #1112 - some binary strings
    # will result in a "redundant UTF-8 sequence" error when attempting
    # to convert to JSON.  This is scheduled for fixing in Rails 2.3.4.
    # Until then, we'll just ask the user to download the file.

    # TODO:  Make this more graceful, and localized
    page.call "alert", "Could not render this file in the code viewer.  Click on the Download button to download the file instead."
    page.alert e.message

end

