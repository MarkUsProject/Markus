<script>
  var selected_markable_id = null;
  var selected_extra_mark_id = null;
  var positions = null;
  var modal = null;
  var init_content_width = 0;
  var init_code_pane_width = 0;

  var annotation_manager = null;
  var syntax_highlighter_adapter = null;

  var ANNOTATION_TYPES = {
    CODE: 0,
    IMAGE: 1,
    PDF: 2
  };

  // Enum to tell the code if an image, code, or pdf is being shown
  // in the codeviewer
  var annotation_type;

  function source_code_ready() {
    annotation_type = ANNOTATION_TYPES.CODE;

    document.getElementById('select_file_id').disabled = false;
    var dp_highlighter = $('.dp-highlighter')[0];
    var first_ol = $('ol')[0];
    syntax_highlighter_adapter = new SyntaxHighlighter1p5Adapter(
        $(dp_highlighter).find(first_ol)[0]);

    // Apply modifications to Syntax Highlighter
    syntax_highlighter_adapter.applyMods();

    var collection   = new SourceCodeLineArray();
    var line_factory = new SourceCodeLineFactory();
    var line_manager = new SourceCodeLineManager(syntax_highlighter_adapter, line_factory, collection);
    var annotation_text_manager   = new AnnotationTextManager();
    var annotation_text_displayer = new AnnotationTextDisplayer();

    annotation_manager = new SourceCodeLineAnnotations(line_manager, annotation_text_manager, annotation_text_displayer);
  }

  // A version of source_code_ready for image files.
  function source_code_ready_for_image() {
    annotation_type = ANNOTATION_TYPES.IMAGE;

    var image_event_handler       = new ImageEventHandler();
    var annotation_text_manager   = new AnnotationTextManager();
    var annotation_text_displayer = new AnnotationTextDisplayer();

    annotation_manager = new ImageAnnotationGrid(image_event_handler,
                                                 annotation_text_manager,
                                                 annotation_text_displayer);

    document.getElementById('select_file_id').disabled = false;
  }

  /**
   * Prepare annotation for pdf annotations.
   *
   * @param {PDFView} pdfView     PDF Viewer
   * @param {String}  pdfViewerId The ID of the PDF viewer.
   */
  function source_code_ready_for_pdf(pdfView, pdfViewerId) {
    annotation_type = ANNOTATION_TYPES.PDF;

    annotation_manager = new PdfAnnotationManager(pdfView, pdfViewerId);
    annotation_manager.resetAngle();
  }

  /**
   * Called when annotations are being added to the view.
   *
   * @param {string} annotation_text_id ID of the annotation text
   * @param {string} content            Text for the annotation
   */
  function add_annotation_text(annotation_text_id, content) {
    if (annotation_type === ANNOTATION_TYPES.PDF) {
      add_pdf_annotation(annotation_text_id, content,
        annotation_manager.selectionRectangleAsInts());
    } else {
      var annotation_text = new AnnotationText(annotation_text_id, 0, content);
      annotation_manager.registerAnnotationText(annotation_text);
    }
  }

  // Register an image_annotation with the image annotation_grid
  function add_to_annotation_grid(extracted_coords) {
    annotation_manager.add_to_grid(JSON.parse(extracted_coords));
  }

  function add_pdf_annotation(annotation_text_id, content, extracted_coords) {
    var coords = (typeof extracted_coords === 'string' ? JSON.parse(extracted_coords) : extracted_coords);
    annotation_manager.addAnnotation(annotation_text_id, content, coords);
  }

  function add_annotation(annotation_id, range, annotation_text_id) {
    annotation_manager.annotateRange(annotation_id, range, annotation_text_id);
  }

  function remove_annotation(annotation_id, range, annotation_text_id) {
    if (annotation_manager.getAnnotationTextManager().annotationTextExists(annotation_text_id)) {
      annotation_manager.remove_annotation(annotation_id, range, annotation_text_id);
    }
  }

  /**
   * Update the text in an annotation.
   */
  function update_annotation_text(annotation_text_id, new_content) {
    if (annotation_manager.getAnnotationTextManager().annotationTextExists(annotation_text_id)) {
      annotation_manager
        .getAnnotationTextManager()
        .getAnnotationText(annotation_text_id)
        .setContent(new_content);
    }
  }

  function get_mouse_positions() {
    var mouseSelection = window.getSelection();

    // Get the start (anchor) and finish (focus) text nodes for where the mouse has selected
    var mouse_anchor = mouseSelection.anchorNode;
    var mouse_focus  = mouseSelection.focusNode;

    // Use the SourceCodeAdapter to get the nodes that represent source code lines.
    var anchor_node = syntax_highlighter_adapter.getRootFromSelection(mouse_anchor);
    var focus_node  = syntax_highlighter_adapter.getRootFromSelection(mouse_focus);

    // Translate these nodes to line numbers
    var line_manager = annotation_manager.getLineManager();
    var line_start   = line_manager.getLineNumber(anchor_node);
    var line_end     = line_manager.getLineNumber(focus_node);

    // If we selected an entire line the above returns + 1, a fix follows
    if (mouseSelection.anchorNode.nodeName === "LI"){
      line_start--;
    }
    if (mouseSelection.focusNode.nodeName === "LI"){
      line_end--;
    }

    // If no source code lines were selected, bail out
    if (line_start == 0 && line_end == 0) {
      alert("<%= I18n.t('marker.annotation.select_some_text') %>");
      return false;
    }

    // Add up node lengths to get column offsets
    var anchor_line_span;
    if(mouseSelection.anchorNode.parentNode.parentNode.nodeName === "SPAN") {
      anchor_line_span = mouseSelection.anchorNode.parentNode.parentNode;
    }
    else {
      anchor_line_span = mouseSelection.anchorNode.parentNode;
    }
    var column_start = 0;
    for (var i = 0; i < anchor_line_span.childNodes.length; i++) {
      if (anchor_line_span.childNodes[i] == mouseSelection.anchorNode.parentNode ||
        anchor_line_span.childNodes[i] == mouseSelection.anchorNode){
        // If the actual node add the offset
        column_start += mouseSelection.anchorOffset;
        break;
      }
      else {
        // If just a lead up node add the entire length
        column_start += anchor_line_span.childNodes[i].textContent.length;
      }
    }

    // Repeat the same process for the focus node
    var focus_line_span;
    if(mouseSelection.focusNode.parentNode.parentNode.nodeName === "SPAN") {
      focus_line_span = mouseSelection.focusNode.parentNode.parentNode;
    }
    else {
      focus_line_span = mouseSelection.focusNode.parentNode;
    }
    var column_end = 0;
    for (var i = 0; i < focus_line_span.childNodes.length; i++) {
      if (focus_line_span.childNodes[i] == mouseSelection.focusNode.parentNode ||
        focus_line_span.childNodes[i] == mouseSelection.focusNode){
        column_end += mouseSelection.focusOffset;
        break;
      }
      else {
        column_end += focus_line_span.childNodes[i].textContent.length;
      }
    }

    // If only one valid source code line was selected, we'll only highlight
    // that one.  This is for the case where you highlight the first line, and
    // then focus some text outside of the source code as well.
    if (line_start == 0 && line_end != 0) {
      line_start = line_end;
    }
    else if (line_start != 0 && line_end == 0) {
      line_end = line_start;
    }
    // If line_start > line_end, swap line and column (consider adding swap function)
    else if (line_start > line_end) {
      var temp_line = line_start;
      line_start = line_end;
      line_end = temp_line;

      var temp_column = column_start;
      column_start = column_end;
      column_end = temp_column;
    }

    if (line_start == line_end && column_start > column_end) {
      var temp_column = column_start;
      column_start = column_end;
      column_end = temp_column;
    }

    // Return positions as an object
    return { line_start: line_start, line_end: line_end, column_start: column_start, column_end: column_end };
  }

  function get_selection_box_coordinates() {
    var box = document.getElementById('sel_box');
    var x1 = parseInt(box.style.left, 10) -
               document.getElementById('image_preview').offsetLeft +
               document.getElementById('image_container').scrollLeft;
    var y1 = parseInt(box.style.top, 10) -
               document.getElementById('image_preview').offsetTop +
               document.getElementById('codeviewer').scrollTop;
    var x2 = x1 + parseInt(box.style.width, 10);
    var y2 = y1 + parseInt(box.style.height, 10);

    if ((x2 - x1) < 1 || isNaN(x2 - x1)) {
      return false;
    } else {
      return { x1: x1, x2: x2, y1: y1, y2: y2 };
    }
  }

  function get_selection_box() {
    var coordinates = get_selection_box_coordinates();
    if (!coordinates) {
      alert("<%= I18n.t('marker.annotation.select_an_area') %>");
      return false;
    } else {
      return coordinates;
    }
  }

  function rotate() {
    annotation_manager.hideSelectionBox();

    if (annotation_type === ANNOTATION_TYPES.PDF) {
      annotation_manager.rotateClockwise90();
      PDFView.rotatePages(90);
    }
  }

  function get_text_annotation_data() {
    positions = get_mouse_positions();
    if (syntax_highlighter_adapter === null || !positions) return false;
    return {
      annotation_type: 'text',
      line_start: positions.line_start,
      line_end: positions.line_end,
      column_start: positions.column_start,
      column_end: positions.column_end,
    };
  }

  function get_pdf_annotation_data() {
    var box_attrs = get_pdf_box_attrs();
    if (!box_attrs) {
      alert("<%= I18n.t('marker.annotation.select_an_area_pdf') %>");
      return false;
    }
    var box = box_attrs.box;
    var page = box.page;
    var angle = annotation_manager.getAngle();
    switch (angle) {
      case 90:
        box = annotation_manager.getRotatedCoords(box, 3);
        break;
      case 180:
        box = annotation_manager.getRotatedCoords(box, 2);
        break;
      case 270:
        box = annotation_manager.getRotatedCoords(box, 1);
        break;
    }
    return {
      annotation_type: 'pdf',
      x1: box.x1,
      x2: box.x2,
      y1: box.y1,
      y2: box.y2,
      page: page
    };
  }

  function get_image_annotation_data() {
    var box = get_selection_box();
    if (!box) return false;
    return {
      annotation_type: 'image',
      x1: box.x1,
      x2: box.x2,
      y1: box.y1,
      y2: box.y2,
    };
  }

  function make_new_annotation() {
    var data = {
      result_id: <%= result_id %>,
      assignment_id: <%= assignment_id %>,
      submission_file_id: $('#select_file_id').val(),
    };
    // Check if image is shown, and call the appropriate function if so
    // Set global variable 'positions' to current mouse positions
    if (annotation_type === ANNOTATION_TYPES.CODE) {
      var annot_data = get_text_annotation_data();
    } else if (annotation_type === ANNOTATION_TYPES.PDF) {
      var annot_data = get_pdf_annotation_data();
    } else {
      var annot_data = get_image_annotation_data();
    }

    if (!annot_data) return false;
    else $.extend(data, annot_data);

    $.ajax({
      url:  '<%= new_annotation_path %>',
      method: 'GET',
      data: data,
      dataType: 'script'
    });
  }

  function get_pdf_box_attrs() {
    var box = annotation_manager.selectionRectangleAsInts();
    var boxSize = annotation_manager.selectionBoxSize();

    if (!box || boxSize.width < 5 || boxSize.height < 5) {
      return false;
    } else {
      return { box: box, boxSize: boxSize };
    }
  }

  // Takes the ID of an existing annotation (from the database), adds the new
  // annotation link to the currently selected text, then highlights the lines.
  function add_existing_annotation(annotation_text_id, result_id, assignment_id) {
    if (annotation_type === ANNOTATION_TYPES.IMAGE) {
      var box = get_selection_box();
      if (!box) { return; }

      $.ajax({
        url:  '<%= add_existing_annotation_annotations_path %>',
        type: 'POST',
        data: 'annotation_type=image' +
              '&submission_file_id=' + document.getElementById('select_file_id').value +
              '&annotation_text_id=' + annotation_text_id +
              '&x1=' + box.x1 +
              '&x2=' + box.x2 +
              '&y1=' + box.y1 +
              '&y2=' + box.y2 +
              '&result_id=' + result_id +
              '&assignment_id=' + assignment_id +
              '&authenticity_token=' + AUTH_TOKEN
      });
    } else if (annotation_type === ANNOTATION_TYPES.PDF) {
      var box = annotation_manager.selectionRectangleAsInts();
      if (!box) { return; }

      $.ajax({
        url:  '<%= add_existing_annotation_annotations_path %>',
        type: 'POST',
        data: 'annotation_type=pdf' +
              '&submission_file_id=' + document.getElementById('select_file_id').value +
              '&annotation_text_id=' + annotation_text_id +
              '&x1=' + box.x1 +
              '&x2=' + box.x2 +
              '&y1=' + box.y1 +
              '&y2=' + box.y2 +
              '&result_id=' + result_id +
              '&assignment_id=' + assignment_id +
              '&page=' + box.page +
              '&authenticity_token=' + AUTH_TOKEN
      });
    } else {
      positions = get_mouse_positions();
      if (!positions) { return false; }

      $.ajax({
        url:  '<%= add_existing_annotation_annotations_path %>',
        type: 'POST',
        data: 'submission_file_id=' + document.getElementById('select_file_id').value +
              '&line_start=' + positions.line_start +
              '&line_end=' + positions.line_end +
              '&column_start=' + positions.column_start +
              '&column_end=' + positions.column_end +
              '&annotation_text_id=' + annotation_text_id +
              '&result_id=' + result_id +
              '&assignment_id=' + assignment_id +
              '&authenticity_token=' + AUTH_TOKEN
      });
    }
  }

  // Load a submitted file into the code-viewer based on file id's
  function load_submitted_file(submission_file_id, focus_line) {
    // Clear out any annotation_texts still on the screen
    $('.annotation_text_display').each(function() {
      this.remove();
    });

    document.getElementById('working').style.display = '';

    positions = null;
    annotation_manager = null;

    $.ajax({
      url: '<%= @current_user.student? ? codeviewer_assignment_result_path(uid: @uid) :
                                         codeviewer_assignment_result_path(uid: @uid) %>',
      type: 'POST',
      data: 'submission_file_id=' + submission_file_id +
            '&focus_line=' + focus_line +
            '&authenticity_token=' + AUTH_TOKEN
    }).always(function() {
      document.getElementById('working').style.display = 'none';
    });
  }

  function load_submitted_file_and_focus(submission_file_id, focus_line) {
    // First, switch to the source code viewer tab
    $('#code_pane').tabs({ active: 0 });

    if (document.getElementById('select_file_id').value == submission_file_id) {
      focus_source_code_line(focus_line);
    } else {
      document.getElementById('select_file_id').value = submission_file_id;
      load_submitted_file(submission_file_id, focus_line);
    }
  }

  function focus_source_code_line(line_num) {
    if (typeof(line_num) == 'undefined' || line_num == null) {
      return;
    }

    // Scroll to the DOM node that represents this source code line
    var line = annotation_manager.getLineManager().getLine(line_num);
    if (line != null) {
      line.getLineNode().scrollIntoView();
    }
  }

  function open_annotation_modal() {
    $('#new_annotation_content').keydown(function(e) {
    var keyCode = e.keyCode || e.which;
      if (keyCode == 9) {
        e.preventDefault();
        var start = this.selectionStart;
        var end   = this.selectionEnd;
        this.value = this.value.substring(0, start)
            + '  '
            + this.value.substring(end);
        this.selectionStart = this.selectionEnd = start + 2;
      }
    });
    modal.open();
  }

  function close_annotation_modal() {
    modal.close();
    hideAnnotationPreview();
    $('#annotation_dialog').empty();
  }

  function hide_all_annotation_content_editors() {
    $('.annotation_text_content_editor').each(function(index) {
      $(this).hide();
    });

    var box = document.getElementById('sel_box');
    if (box) {
      box.style.display = 'none';
      box.style.width   = '0';
      box.style.height  = '0';
    }
    close_annotation_modal();
  }

  // Hide all display boxes on the screen.
  function hide_image_annotations() {
    if (annotation_manager == null) { return; }
    annotation_manager.getAnnotationTextDisplayer().hideShowing();
  }
</script>
