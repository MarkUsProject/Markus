<script type="text/javascript">
//<![CDATA[
var selected_markable_id = null;
var selected_extra_mark_id = null;
var positions = null;
var modal = null;
var init_content_width = 0;
var init_code_pane_width = 0;

var annotation_manager = null;
var syntax_highlighter_adapter = null;

//bool to tell the code if an image or code is being shown
var is_image;

function source_code_ready() {
  annotation_manager = null;
  jQuery('#loading_code').hide();
  jQuery('#select_file_id').find('input, textarea').each(function(i) {jQuery(this).removeAttr("readonly"); });

	//console.log("VOICI .dp-highlighter :")
	//console.log($$('.dp-highlighter').first);
	//console.log(jQuery('.dp-highlighter')[0].getElementsBySelector('ol')[0]);
	//console.log($( ".dp-highlighter:first" ));
	//console.log();
	//jQuery('.dp-highlighter').each(function(){ console.log(":-D"); console.log(jQuery(this)); });
	//console.log("CT .dp-highlighter")

  syntax_highlighter_adapter = new SyntaxHighlighter1p5Adapter(
      jQuery('.dp-highlighter')[0].getElementsBySelector('ol')[0]);

  //Apply modifications to Syntax Highlighter
  syntax_highlighter_adapter.applyMods();

  var collection = new SourceCodeLineArray();
  var line_factory = new SourceCodeLineFactory();
  var line_manager = new SourceCodeLineManager(syntax_highlighter_adapter, line_factory, collection);
  var annotation_text_manager = new AnnotationTextManager();
  var annotation_text_displayer = new AnnotationTextDisplayer(jQuery('#annotation_holder'));

  annotation_manager = new SourceCodeLineAnnotations(line_manager, annotation_text_manager, annotation_text_displayer);

  is_image = false;
}

//A version of source_code_ready for image files.
function source_code_ready_for_image() {
  annotation_manager = null;

  var image_event_handler = new ImageEventHandler();
  var annotation_text_manager = new AnnotationTextManager();
  var annotation_text_displayer = new AnnotationTextDisplayer(
                                        jQuery('#annotation_holder'));

  annotation_manager = new ImageAnnotationGrid(image_event_handler,
      annotation_text_manager, annotation_text_displayer);

  jQuery('#loading_code').hide();
  jQuery('#select_file_id').find('input, textarea').each(function(i) { jQuery(this).removeAttr("readonly"); });

  is_image = true;
}

function add_annotation_text(annotation_text_id, content) {
  var annotation_text = new AnnotationText(annotation_text_id, 0, content);
  annotation_manager.registerAnnotationText(annotation_text);
}

//Register an image_annotation with the image annotation_grid
function add_to_annotation_grid(extracted_coords){
  annotation_manager.add_to_grid(extracted_coords.evalJSON());
}

function add_annotation(annotation_id, range, annotation_text_id) {
  annotation_manager.annotateRange(annotation_id, range, annotation_text_id);
}

function remove_annotation(annotation_id, range, annotation_text_id) {
  if(annotation_manager.getAnnotationTextManager().annotationTextExists(annotation_text_id)) {
    annotation_manager.remove_annotation(annotation_id, range, annotation_text_id);
  }
}

function update_annotation_text(annotation_text_id, new_content) {
  if(annotation_manager.getAnnotationTextManager().annotationTextExists(annotation_text_id)) {
    annotation_manager.getAnnotationTextManager().getAnnotationText(annotation_text_id).setContent(new_content);
  }
}

function get_anchor() {
  //TODO:  Get this to work for IE
  return window.getSelection().anchorNode;
}

function get_focus() {
  //TODO:  Get this to work for IE
  return window.getSelection().focusNode;
}

function get_mouse_positions() {
 //Get the start (anchor) and finish (focus) text nodes for where the mouse has selected
  var mouse_anchor = get_anchor();
  var mouse_focus = get_focus();

  //Use the SourceCodeAdapter to get the nodes that represent source code
  //lines.
  var anchor_node = syntax_highlighter_adapter.getRootFromSelection(mouse_anchor);
  var focus_node = syntax_highlighter_adapter.getRootFromSelection(mouse_focus);

  //Translate these nodes to line numbers
  var line_start = annotation_manager.getLineManager().getLineNumber(anchor_node);
  var line_end = annotation_manager.getLineManager().getLineNumber(focus_node);

  //If no source code lines were selected, bail out
  if(line_start == 0 && line_end == 0) {
    alert("<%= I18n.t('marker.annotation.select_some_text') %>");
    return false;
  }
  //If only one valid source code line was selected, we'll only highlight
  //that one.  This is for the case where you highlight the first line, and
  //then focus some text outside of the source code as well.

  if(line_start == 0 && line_end != 0) {
    line_start = line_end;
  }
  if(line_start != 0 && line_end == 0) {
    line_end = line_start;
  }

  //If line_start > line_end, swap
  if(line_start > line_end) {
    var temp = line_start;
    line_start = line_end;
    line_end = temp;
  }

  //Return positions as an object
  return {line_start: line_start, line_end: line_end};
}

function make_new_annotation() {
  //check if image is shown, and call the appropriate function if so
  if (!is_image) {
    positions = get_mouse_positions();
  } else {
    return make_new_image_annotation();
  }

  //Set global variable 'positions' to current mouse positions
  //TODO:  Refactor?  Why the global variable?
  if (syntax_highlighter_adapter == null) {
    return false;
  }

  if(!positions) {
    //If no text was returned, return false;
    return false;
  }
  //Open the modal dialog to ask for new Annotation details
  modal.open();
  //Manually reset the modal dialog values
  //TODO:  Refactor?
  jQuery('#new_annotation_content').val('');
  jQuery('#new_annotation_category').val('');
  jQuery('#x1').val('');
  jQuery('#x2').val('');
  jQuery('#y1').val('');
  jQuery('#y2').val('');
  jQuery('#new_annotation_content').focus();

  return false;
}

function make_new_image_annotation() {
  var box = jQuery("#sel_box");
	console.log("VOICI BOOOX :");
	console.log(box);
	console.log("CT BOX");
  var x1 = parseInt(box.style.left) -
    jQuery("#image_preview").offsetLeft +
    jQuery("#image_container").scrollLeft;
  var y1 = parseInt(box.style.top) -
    jQuery("#image_preview").offsetTop +
    jQuery("#image_container").scrollTop;
  var x2 = x1 + parseInt(box.style.width);
  var y2 = y1 + parseInt(box.style.height);
  if ((x2 - x1) < 1 || isNaN(x2 - x1)) {
    alert("<%= I18n.t('marker.annotation.select_an_area') %>");
    return false
  }
  //Open the modal dialog to ask for new Annotation details
  modal.open();
  //Manually reset the modal dialog values
  //TODO:  Refactor?
  jQuery('#new_annotation_content').val('');
  jQuery('#new_annotation_category').val('');
  jQuery('#x1').val(x1);
  jQuery('#x2').val(x2);
  jQuery('#y1').val(y1);
  jQuery('#y2').val(y2);
  jQuery('#new_annotation_content').focus();
}

<%#
This function takes the ID of some annotation that already
exists in the database, adds the new annotation link to the
currently selected text, and then highlights the lines.
%>
function add_existing_annotation(annotation_text_id) {
  if(is_image) {
    var box = jQuery("#sel_box");
    var x1 = parseInt(box.style.left) -
      jQuery("#image_preview").offsetLeft +
      jQuery("#image_container").scrollLeft;
    var y1 = parseInt(box.style.top) -
      jQuery("#image_preview").offsetTop +
      jQuery("#image_container").scrollTop;
    var x2 = x1 + parseInt(box.style.width);
    var y2 = y1 + parseInt(box.style.height);
    if ((x2 - x1) < 1 || isNaN(x2 - x1)) {
      alert("<%= I18n.t('marker.annotation.select_an_area') %>");
      return false
    }
	
		jQuery.ajax({
			url: "<%= add_existing_annotation_annotations_path() %>",
			data: 'annotation_type=image' +
				'&submission_file_id='+ jQuery('#select_file_id').val() +
				'&annotation_text_id='+ annotation_text_id +
				'&x1=' +  x1 + '&x2=' + x2 +
				'&y1=' + y1 + '&y2=' + y2 +
				'&authenticity_token=' + AUTH_TOKEN,
			type: "POST",
			async: true
		});
		
  } else {
	  positions = get_mouse_positions();
	  if (!positions) {
	    return false;
	  }

		jQuery.ajax({
			url: "<%= add_existing_annotation_annotations_path() %>",
			data: 'submission_file_id='+ jQuery('#select_file_id').val() + 
				'&line_start=' + positions.line_start + 
				'&line_end=' + positions.line_end +
				'&annotation_text_id='+  annotation_text_id +
				'&authenticity_token=' + AUTH_TOKEN,
			type: "POST",
			async: true
		});
  }
}

//Load a submitted file into the code-viewer based on file id's
function load_submitted_file(submission_file_id, focus_line) {
  // Clear out any annotation_texts still on the screen
  jQuery('.annotation_text_display').each(function(index) {
		jQuery(this).remove();
  });
  
  jQuery('#loading_code').show();  
  jQuery('#select_file_id').find('input, textarea').each(function(i) { jQuery(this).attr("readonly","readonly"); });
  
  positions = null;
  annotation_manager = null;
  jQuery.ajax({
    url: "<%= codeviewer_assignment_submission_result_path(:id => @assignment.id, :uid => @uid) %>",
    data: 'submission_file_id=' + submission_file_id +
		  '&focus_line=' + focus_line +
		  '&authenticity_token=' + AUTH_TOKEN,
    type: "POST",
    async: true
  });
}

function load_submitted_file_and_focus(submission_file_id, focus_line) {
  //First, switch to the source code viewer tab
  code_tab_menu.setActiveTab('code_holder');

  if(jQuery('#select_file_id').val() == submission_file_id) {
    focus_source_code_line(focus_line);
  } else {
    jQuery('#select_file_id').val(submission_file_id);
    load_submitted_file(submission_file_id, focus_line);
  }
}

function submit_new_annotation(content, category_id, x1, x2, y1, y2) {
  //Was any annotation text content provided?
  if (content == '') {
    alert('You must provide some annotation text');
    return false;
  }

  //Close the dialog
  modal.close();
  //Send AJAX request
  //Text annotation
  if (positions != null){
    jQuery.ajax({
      url: "<%=annotations_path()%>",
      data: 'annotation_type=text' +
			'&submission_file_id='+ jQuery('#select_file_id').val() +
			'&line_start=' + positions.line_start +
			'&line_end=' +  positions.line_end +
			'&content=' + encodeURIComponent(content) +
			'&category_id=' +  category_id +
			'&authenticity_token=' + AUTH_TOKEN,
      type: "POST",
      async: true
    });
  }
  else{
    jQuery.ajax({
      url: "<%=annotations_path()%>",
      data: 'annotation_type=image' +
            '&submission_file_id='+ jQuery('#select_file_id').val() +
            '&content=' + encodeURIComponent(content) +
            '&category_id=' + category_id +
            '&x1=' + x1 + '&x2=' + x2 + 
			'&y1=' + y1 + '&y2=' + y2 +
            '&authenticity_token=' + AUTH_TOKEN,
      type: "POST",
      async: true
    });
  }
}

function focus_source_code_line(line_num) {
  if(typeof(line_num) == 'undefined' || line_num == null) {
    return;
  }
  //Grab the dom node that represents this source code line,
  //and scroll to it.
  var line = annotation_manager.getLineManager().getLine(line_num);
  if(line != null) {
    jQuery('#'+line.getLineNode()).scrollIntoView();
  }
}

function setup_divider(widen_target, dragger) {
    var divider = new ResizePane(widen_target, dragger);	
	jQuery('#mark_pane').css("width",jQuery('#mark_pane').css('width'));
	
    return;
}

function hide_all_annotation_content_editors() {
  jQuery('.annotation_text_content_editor').each(function(index) {
	jQuery(this).hide();
  });
  var box = jQuery("#sel_box");
  if (box) {
    box.style.display = "none";
    box.style.width = "0";
    box.style.height = "0";
  }
}

//Hide all display boxes on the screen.
function hide_image_annotations() {
  if(annotation_manager == null){ return;}
  annotation_manager.getAnnotationTextDisplayer().hideShowing();
}
//]]>
</script>
