<% content_for :head do %>
  <%# TODO: merge 'grader.scss' into 'results.scss' %>
  <%= stylesheet_link_tag 'result_main' %>
  <%# MathML %>
  <%= javascript_include_tag 'MathJax_lib/MathJax.js?config=TeX-AMS-MML_HTMLorMML' %>
  <%= javascript_include_tag 'MathJax/mathjax_helpers', defer: true %>
  <%= javascript_pack_tag 'result' %>
    <script>
    document.addEventListener('DOMContentLoaded', () => {
      window.annotationTable =
        makeAnnotationTable(document.getElementById('annotation_table'),
          {
            result_id: <%= @result.id %>,
            submission_id: <%= @result.submission_id %>,
            assignment_id: <%= @result.submission.grouping.assignment_id %>,
            detailed: <%= @current_user.admin? || @current_user.ta? ||
                          @current_user.is_reviewer_for?(@assignment.pr_assignment, @result) %>
          }
      );

      <% unless @result.released_to_students || @current_user.is_reviewer_for?(@assignment.pr_assignment, @result) %>
      window.annotationManager =
        makeAnnotationManager(document.getElementById('annotation_options'),
          {
            result_id: <%= @result.id %>,
            submission_id: <%= @result.submission_id %>,
            assignment_id: <%= @result.submission.grouping.assignment_id %>,
          }
        );
      <% end %>
      window.submissionFileViewer =
        makeFileViewer(document.getElementById('codeviewer'),
          {
            result_id: <%= @result.id %>,
            submission_id: <%= @result.submission_id %>,
            assignment_id: <%= @result.submission.grouping.assignment_id %>,
          }
        );
    });
  </script>
<% end %>

<script>
  var modalNotesGroup = null;

  $(document).ready(function() {
    localStorage.setItem('assignment_id', <%= @result.submission.grouping.assignment_id %>);
    window.modalNotesGroup = new ModalMarkus('#notes_dialog');
    window.modal_download = new ModalMarkus('#download_files_dialog');
    window.modal_help = new ModalMarkus('#help_dialog');

    // Set up the 'working' notices
    $('#working').ajaxStart(function() {
      this.style.display = '';
      window.onbeforeunload = check_working;
    }).ajaxStop(function() {
      this.style.display = 'none';
      window.onbeforeunload = null;
    });

    // If the mark_description div is empty, that means it isn't marked
    // Hide the criterion that AREN'T empty (i.e. are marked)
    // Check if the marks are released, if they are there is nothing to hide
    <% unless @result.released_to_students %>
      $('.mark_criterion_level_container').each(function() {
        expand_unmarked(this, 'RubricCriterion');
      });
      $('.mark_grade_input').each(function() {
        expand_unmarked(this, 'FlexibleCriterion');
      });
      $('.mark_grade_input_checkbox_container').each(function() {
        expand_unmarked(this, 'CheckboxCriterion');
      });
    <% end %>

    <%
      if @current_user.admin?
        num_marked = @assignment.get_num_marked
        num_assigned = @assignment.get_num_assigned
      else
        num_marked = @assignment.get_num_marked(@current_user.id)
        num_assigned = @assignment.get_num_assigned(@current_user.id)
      end
    %>
    update_bar(<%= num_marked %>, <%= num_assigned %>);

    <%= render partial: 'results/marker/keybinding',
               formats: [:js] %>
  });

  function check_working() {
    return '<%= t(:still_working_warning) %>';
  }
</script>

<% # Javascript for showing/hiding old marks %>
<%= render partial: 'results/common/old_marks_view_functions',
           formats: [:html] %>

<% # Javascript for feedback file window %>
<%= render partial: 'assignments/feedback_file_window',
           formats: [:js] %>

<% # Javascript for progress bar %>
<%= render partial: 'results/marker/update_progress_bar',
           formats: [:js] %>

<%= render partial: 'results/common/annotations',
           formats: [:js],
           locals: {
             result_id: @result.id,
             assignment_id: @result.submission.grouping.assignment.id
           } %>

<%= render partial: 'results/marker/boot',
           formats: [:js],
           locals: { first_file: @files.first } %>

<!-- Dialogs -->
<aside class='dialog' id='notes_dialog' style='display:none'></aside>
<aside class='dialog' id='download_files_dialog' style='display:none'>
  <h1><%= 'Download Files' %></h1>

  <%= render partial: 'results/common/download_file_selector',
             locals: { files: @files,
                       can_download: true } %>

</aside>
<aside class='dialog' id='help_dialog' style='display:none'>
  <h1><%=t('keybinding.keyboard_help')%></h1>
  <table class="help_table">
    <tr>
      <td><kbd>Alt</kbd> + <kbd>Enter/return</kbd></td>
      <td><%=t('keybinding.toggle_compact')%></td>
    </tr>
    <tr>
      <td><kbd>Shift</kbd> + <kbd>⇨</kbd></td>
      <td><%=t('keybinding.next_submission')%></td>
    </tr>
    <tr>
      <td><kbd>Shift</kbd> + <kbd>⇦</kbd></td>
      <td><%=t('keybinding.previous_submission')%></td>
    </tr>
    <tr>
      <td><kbd>Shift</kbd> + <kbd>⇧</kbd></td>
      <td><%=t('keybinding.previous_criterion')%></td>
    </tr>
    <tr>
      <td><kbd>Shift</kbd> + <kbd>⇩</kbd></td>
      <td><%=t('keybinding.next_criterion')%></td>
    </tr>
    <tr>
      <td><kbd>⇧</kbd></td>
      <td><%=t('keybinding.when_rubric') + t('keybinding.previous_level')%></td>
    </tr>
    <tr>
      <td><kbd>⇩</kbd></td>
      <td><%=t('keybinding.when_rubric') + t('keybinding.next_level')%></td>
    </tr>
    <tr>
      <td><kbd>Enter/return</kbd></td>
      <td><%=t('keybinding.when_rubric') + t('keybinding.confirm_level')%></td>
    </tr>
    <tr>
      <td><kbd>Shift</kbd> + <kbd>n</kbd></td>
      <td><%=t('keybinding.open_annotation')%></td>
    </tr>
    <tr>
      <td><kbd>Cmd/Ctrl</kbd> + <kbd>Enter/return</kbd></td>
      <td><%=t('keybinding.confirm_annotation')%></td>
    </tr>
  </table>
</aside>
<% if @current_user.admin? %>
  <aside class='dialog' id='create_new_tag' style='display:none'>
    <h1><%= t('tags.create.create_new') %></h1>
    <p><%= t('tags.create.tag_prompt') %></p>
    <%= form_for :create_new,
                 url: assignment_tags_path(@assignment),
                 html: { multipart: true } do |f| %>
        <div>
          <p><%= f.text_field :name,
                              placeholder: t('tags.create.name_prompt') %></p>
        </div>
        <div>
          <p class='alignleft'><%= t('tags.create.tag_description') %></p>
          <p id='descript_amount' class='alignright'>0/120</p>
          <p class="clear-alignment"><%= f.text_area :description,
                                                  id: 'description',
                                                  cols: 30,
                                                  rows: 3,
                                                  maxlength: 120,
                                                  onKeyDown: 'updateCharCount()',
                                                  placeholder: t('tags.create.descript_prompt') %></p>
        </div>
        <section class='dialog-actions'>
          <%= hidden_field_tag 'grouping_id', @grouping.id %>
          <%= f.submit t('tags.create.button_text') %>
          <input type='reset'
                 value='<%= t(:cancel) %>'
                 onclick='modal_create_new.close();'>
        </section>
    <% end %>
  </aside>
  <aside class='dialog' id='delete_tags' style='display:none'>
    <h1><%= t('tags.delete.delete_tags') %></h1>
    <p><%= t('tags.delete.tag_prompt') %></p>
    <%= form_for :delete,
                 url: assignment_tags_path(@assignment),
                 html: { multipart: true } do |f| %>

    <% end %>
    <input type='reset'
           value='<%= t(:cancel) %>'
           onclick='modal_delete_tags.close();'>
  </aside>
<% end %>

<% content_for :title do %>
  <%= t('results.title',
        { assignment_name: @assignment.short_identifier,
          group_name: @current_user.student? ? t('assignment.review') : @grouping.get_group_name }) %>
<% end %>
<% content_for :additional_headings do %>
  <div class="progress_meter">
    <span class="progress_span">
    </span>
  </div>
  <a onclick="compact_view_toggle()" style="margin: 0px 15px">Compact View</a>
<% end %>

<div class='wrapLeft'>
  <% if flash[:fail_notice] %>
    <p class='error'><%= flash[:fail_notice] %></p>
  <% end %>

  <% if @result.released_to_students %>
    <p class='notice'><%= t(:marks_released_notice) %></p>
  <% end %>

  <% if @grouping.past_due_date? %>
    <p class='warning'>
      <%= t(:past_due_date_edit_result_warning,
            href: link_to(t(:last_commit),
                          repo_browser_assignment_submission_path(
                             @assignment, @grouping))).html_safe %>
    </p>
  <% end %>

  <%= render partial: 'results/common/submission_selector',
             locals: { group: @group,
                       result: @result,
                       assignment: @assignment,
                       previous_grouping: @previous_grouping,
                       next_grouping: @next_grouping } %>

  <%= render partial: 'results/common/errors' %>

  <% if !@result.released_to_students %>
    <%= render partial: 'results/marker/marker_panes',
               locals: { extra_marks_points: @result.extra_marks.points,
                         extra_marks_percentage: @result.extra_marks.percentage,
                         annotation_categories:
                           @assignment.annotation_categories.includes(annotation_texts: [:user]),
                         result: @result,
                         assignment: @assignment,
                         marks_map: @marks_map,
                         old_marks_map: @old_marks_map,
                         mark_criteria:@mark_criteria,
                         submission: @submission,
                         old_result: @old_result,
                         test_results: @test_results,
                         files: @files,
                         feedback_files: @feedback_files} %>
  <% else %>
    <%= render partial: 'results/result_summary',
               formats: [:html],
               handlers: [:erb],
               locals: { extra_marks_points: @result.extra_marks.points,
                         extra_marks_percentage: @result.extra_marks.percentage
               }
    %>
  <% end %>
</div>

<%# Javascript files %>
<%= javascript_include_tag 'Results/main' %>

<!-- load the first file -->
<script>
  var first_file_id;
  var first_file_path;
  <% if @files.empty? %>
    first_file_id = null;
    first_file_path = null;
  <% else %>
    <% if @current_user.ta? && (assignmentfile =
              AssignmentFile.select(:filename)
              .joins('JOIN criteria_assignment_files_joins c ON c.assignment_file_id = assignment_files.id')
              .joins('JOIN criterion_ta_associations t ON c.criterion_id = t.criterion_id')
              .where('t.ta_id = ? AND assignment_files.assignment_id = ?', @current_user.id, @assignment.id)
              .first) %>
      <% index = @files.find_index{|x| x.filename === assignmentfile.filename}.to_i %>
      first_file_id = <%= @files[index].id %>;
      first_file_path = '<%= @files[index].path %>/<%= @files[index].filename %>';
    <% else %>
      first_file_id = <%= @files[0].id %>;
      first_file_path = '<%= @files[0].path %>/<%= @files[0].filename %>';
      if (localStorage.getItem('assignment_id') === '<%= @assignment.id %>' && localStorage.getItem('file_path')) {
        var file = $('.file_item[data-path="' + localStorage.getItem('file_path') + '"]');
        if (file.length === 1) {
          first_file_id = file.data("id");
          first_file_path = file.data("path");
        }
      }
      if (first_file_id !== null && first_file_path !== null) {
        document.addEventListener('DOMContentLoaded', () => {
          // for code viewer
          open_file(first_file_id, first_file_path, false);
          // for download modal
          open_file(first_file_id, first_file_path, true);
        });
      }
    <% end %>
  <% end %>
</script>

<%= render partial: 'results/common/context_menu',
           formats: [:js],
           locals: {
               result: @result,
               annotation_categories: @assignment.annotation_categories.includes(:annotation_texts)
           } %>
