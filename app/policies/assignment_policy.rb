# Assignment policy class
class AssignmentPolicy < ApplicationPolicy
  default_rule :manage?
  alias_rule :summary?, to: :view?
  alias_rule :stop_batch_tests?, :batch_runs?, :stop_test?, to: :manage_tests?
  alias_rule :refresh_graph?, :view_summary?, :download?, :upload?, to: :admin?
  alias_rule :show?, :peer_review?, :start_timed_assignment?, to: :student?

  def index?
    true
  end

  def switch_assignment?
    true
  end

  def manage?
    check?(:manage_assessments?, user)
  end

  # helper policies

  def view_test_options?
    (check?(:run_tests?, user) && check?(:tests_enabled?)) || (user.student? && check?(:student_tests_enabled?))
  end

  def student_tests_enabled?
    record.enable_student_tests && (record.unlimited_tokens || record.tokens_per_period.positive?)
  end

  def tests_enabled?
    record.enable_test
  end

  def test_groups_exist?
    record.test_groups.exists?
  end

  def tokens_released?
    !record.token_start_date.nil? && Time.current >= record.token_start_date
  end

  def create_group?
    !check?(:collection_date_passed?) &&
      check?(:students_form_groups?) &&
      check?(:not_yet_in_group?)
  end

  def work_alone?
    details[:group_min] = record.group_min
    record.group_min == 1
  end

  def collection_date_passed?
    record.past_collection_date?(user.section)
  end

  def students_form_groups?
    record.student_form_groups && !record.invalid_override
  end

  def not_yet_in_group?
    !user.has_accepted_grouping_for?(record.id)
  end

  def autogenerate_group_name?
    record.group_name_autogenerated
  end

  def view?
    user.admin? || user.ta?
  end

  def manage_tests?
    check?(:manage?, with: AutomatedTestPolicy)
  end
end
